openapi: 3.0.0
info:
  title: Zepto API
  description: >

    <aside class="warning">Please note, the APIâ€™s referred to in this documentation are not currently live. This is only to be used as a reference point for customers who are looking to launch with Zepto into New Zealand.</aside>


    Zepto allows you to make, get and manage payments using nothing but bank
    accounts.


    It is important to understand that there are 2 main ways Zepto can be used
    for maximum flexibility:


    1. Between Zepto accounts.

    2. Between a Zepto account and anyone.


    Due to the above, certain endpoints and techniques will differ slightly
    depending on who you are interacting with. You can find more on this in the
    [Making payments](/#making-payments) and [Getting paid](/#getting-paid)
    guides.


    And for all kinds of How To's and Recipes, head on over to our
    [Help Guide](https://help.split.cash/en/).

    <div class="middle-header">Conventions</div>


    * Authentication is performed using OAuth2. See the [Get
    started](/#get-started) and [Authentication &
    Authorisation](/#authentication-and-authorisation) guides for more.

    * All communication is via `https` and supports **only** `TLSv1.2`.

    * Production API: `https://api.nz.zepto.money/`.

    * Production UI: `https://go.nz.zepto.money/`.

    * Sandbox API: `https://api.nz.sandbox.zepto.money/`.

    * Sandbox UI: `https://go.nz.sandbox.zepto.money/`.

    * Data is sent and received as JSON.

    * Clients should include the `Accepts: application/json` header in their requests.

    * Currencies are represented by 3 characters as defined in [ISO
    4217](http://www.xe.com/iso4217.php).

    * Dates & times are returned in UTC using [ISO
    8601](https://en.wikipedia.org/wiki/ISO_8601) format with second accuracy.
    With requests, when no TZ is supplied, the configured TZ of the
    authenticated user is used, or `Pacific/Auckland` if no TZ is configured.

    * Amounts are always in cents with no decimals unless otherwise stated.

    * Zepto provides static public IP addresses for all outbound traffic, including webhooks.
        * Sandbox IP: `13.237.142.60`
        * Production IPs: `52.64.11.67` and `13.238.78.114`

    <div class="middle-header">Breaking Changes</div>


    A breaking change is assumed to be:


    * Renaming a parameter (request/response)

    * Removing a parameter (request/response)

    * Changing a parameter type (request/response)

    * Renaming a header (request/response)

    * Removing a header (request/response)

    * Application of stricter validation rules for request parameters

    * Reducing the set of possible enumeration values for a request

    * Changing a HTTP response status code


    We take backwards compatibility very seriously, and will make every effort
    to ensure this never changes. In the unfortunate (and rare) case where a
    breaking change can not be avoided, these will be announced well in
    advance, enabling a transition period for API consumers.


    The following are not assumed to be a breaking change and must be taken
    into account by API consumers:


    * Addition of optional new parameters in request

    * Addition of new parameters in response

    * Addition of new headers in request

    * Reordering of parameters in response

    * Softening of validation rules for request parameters

    * Increasing the set of possible enumeration values


    In the case of non breaking changes, a transition period may not be
    provided, meaning the possibility of such changes occurring must be
    considered in consumers' logic so as not to break any integrations with
    both API and Webhooks.


    # Guides


    ## Try it out

    The best way to familiarise yourself with our API is by interacting with it.


    We've preloaded a collection with all our endpoints for you to use in Postman.
    Before you start, **import a copy** of our API collection:


    [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/10584592-0037eee4-4a63-4d1a-875f-37ae6bcbf07e?action=collection%2Ffork&collection-url=entityId%3D10584592-0037eee4-4a63-4d1a-875f-37ae6bcbf07e%26entityType%3Dcollection%26workspaceId%3D6400ea2b-bb46-421e-a88c-a8625653c35a#?env%5BNZ%20Zepto%20Public%20Sandbox%5D=W3sia2V5Ijoic2l0ZV9ob3N0IiwidmFsdWUiOiJodHRwczovL256LmdvLnNhbmRib3guemVwdG8ubW9uZXkiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiJodHRwczovL256LmdvLnNhbmRib3guemVwdG8ubW9uZXkiLCJzZXNzaW9uSW5kZXgiOjB9LHsia2V5IjoiYXBpX2hvc3QiLCJ2YWx1ZSI6Imh0dHBzOi8vbnouYXBpLnNhbmRib3guemVwdG8ubW9uZXkiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiJodHRwczovL256LmFwaS5zYW5kYm94LnplcHRvLm1vbmV5Iiwic2Vzc2lvbkluZGV4IjoxfSx7ImtleSI6Im9hdXRoMl9hcHBsaWNhdGlvbl9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoyfSx7ImtleSI6Im9hdXRoMl9zZWNyZXQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6M30seyJrZXkiOiJzY29wZSIsInZhbHVlIjoicHVibGljIGFncmVlbWVudHMgYmFua19hY2NvdW50cyBiYW5rX2Nvbm5lY3Rpb25zIGNvbnRhY3RzIHBheW1lbnRzIHBheW1lbnRfcmVxdWVzdHMgcmVmdW5kX3JlcXVlc3RzIHRyYW5zYWN0aW9ucyByZWZ1bmRzIG9wZW5fYWdyZWVtZW50cyBvZmZsaW5lX2FjY2VzcyIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6InB1YmxpYyBhZ3JlZW1lbnRzIGJhbmtfYWNjb3VudHMgYmFua19jb25uZWN0aW9ucyBjb250YWN0cyBwYXltZW50cyBwYXltZW50X3JlcXVlc3RzIHJlZnVuZF9yZXF1ZXN0cyB0cmFuc2FjdGlvbnMgcmVmdW5kcyBvcGVuX2FncmVlbWVudHMuLi4iLCJzZXNzaW9uSW5kZXgiOjR9LHsia2V5IjoiaXNvODYwMV9ub3ciLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NX0seyJrZXkiOiJhY2Nlc3NfdG9rZW4iLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6Nn0seyJrZXkiOiJyZWZyZXNoX3Rva2VuIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjd9XQ==)


    Okay, let's get things setup!


    1. **Create a Zepto account**

        If you haven't already, you'll want to create a sandbox Zepto account at [https://go.nz.sandbox.zepto.money](https://go.nz.sandbox.zepto.money)

    2. **Register your application with Zepto**

        Sign in and create an OAuth2 application: [https://go.nz.sandbox.zepto.money/oauth/applications](https://go.nz.sandbox.zepto.money/oauth/applications).

        [![Zepto OAuth2 app create](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_app_create.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_app_create.png)

    3. **Generate personal access tokens**

        The quickest way to access your Zepto account via the API is using
        personal access tokens. Click on your newly created application from your [application
    list](https://go.nz.sandbox.zepto.money/oauth/applications) and click on
    **+ Personal Access Token**.

        [![Zepto locate personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_tokens_empty.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_tokens_empty.png)

        _(You'll have the option to give the token a title)_

        [![Zepto personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_token.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_token.png)

        <aside class="notice">Please note that personal access tokens do not expire.</aside>

    4. **Use personal access token in Postman**

        You can use this `access_token` to authorise any requests to the
        Zepto API in Postman by choosing the **Bearer Token** option under
        the **Authorization** tab.

        [![Postman use personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_use_personal_access_token.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_use_personal_access_token.png)

    5. **Make an API request!**

        You are now ready to interact with your Zepto account via the
        API! Go ahead and send a request using Postman.

        [![Postman use personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_request_response.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_request_response.png)



    ## Get started

    This guide will help you setup an OAuth2 app in order to get authenticated &
    authorised to communicate with the Zepto API.



    **Before you start:**


    * We use the term **user** below but the user can be a third party or the
    same user that owns the OAuth2 application.

    * As noted below, some access tokens expire every 2 hours. To get a new
    access token use the [refresh grant
    strategy](/#authentication-and-authorisation) to swap a refresh token for a
    new access token.


    1. **Create a Zepto account**

        If you haven't already, you'll want to create a sandbox Zepto account at [https://go.nz.sandbox.zepto.money](https://go.nz.sandbox.zepto.money).

    2. **Choose authentication method**

        All requests to the Zepto API require an `access_token` for authentication. There are two options for obtaining these tokens, the correct option will depend on your use case:

        **Personal access token** If you only need to access your own Zepto account via the API, then using personal access tokens are the most straight-forward way. Refer to [Personal access token](/#personal-access-token) to setup. These tokens do not expire so no refreshing is required.

        **OAuth grant flow** When you require your application to act on behalf of other Zepto accounts you'll need to implement the OAuth grant flow process. Refer to [OAuth grant flow guide](/#oauth-grant-flow) to setup. There is also an [OAuth grant flow tutorial](/#oauth-grant-flow-tutorial). These access tokens expire every 2 hours, unless the `offline_access` scope is used in which case the tokens will not expire.

    ## Personal access token

    If you're looking to only access your own account via the API, you can
    generate a personal access token from the UI. These tokens do not expire, but can be deleted.


    * To do this, sign in to your Zepto account and [create an
    application](https://go.nz.sandbox.zepto.money/oauth/applications) if you
    haven't already. Click on your application from your [application
    list](https://go.nz.sandbox.zepto.money/oauth/applications) and click on
    **Personal access**.

        [![Zepto locate personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_tokens_empty.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_tokens_empty.png)

        _(You'll have the option to give the token a title)_

        [![Zepto personal OAuth2 tokens](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_token.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_personal_access_token.png)


    * Now that you have an `access_token` you can interact
    with your Zepto account via the API.

        To do so, you must simply append the access token to the header of any API request: `Authorization: Bearer {access_token}`



    ## OAuth grant flow

    1. **Register your application with Zepto**

        Once you've got your account up and running, sign in and create an OAuth2 profile for your application: [https://go.nz.sandbox.zepto.money/oauth/applications](https://go.nz.sandbox.zepto.money/oauth/applications)

        | Parameter | Description |
        |-----------|-------------|
        | **Name**  | The name of your application. When using the the *Authorisation Grant Flow*, users will see this name as the application requesting access to their account. |
        | **Redirect URI** | Set this to your application's endpoint charged with receiving the authorisation code. |

    2. **Obtain an authorisation code**

        Construct the initial URL the user will need to visit in order to grant your application permission to act on his/her behalf. The constructed URL describes the level of permission ([`scope`](/#scopes)), the application requesting permission (`client_id`) and where the user gets redirected once they've granted permission (`redirect_uri`).

        The URL should be formatted to look like this:
        `https://go.nz.sandbox.zepto.money/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}`

        | Parameter | Description |
        |-----------|-------------|
        | `response_type` | Always set to `code` |
        | `client_id` | This is your `Application ID` as generated when you registered your application with Zepto |
        | `redirect_uri` | URL where the user will get redirected along with the newly generated authorisation code |
        | `scope` | The [scope](/#scopes) of permission you're requesting |

    3. **Exchange the authorisation code for an access token**

        When the user visits the above-mentioned URL, they will be presented with a Zepto login screen and then an authorisation screen:

        [![Authorise OAuth2 app](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/oauth2_app_authorise.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/oauth2_app_authorise.png)

        After the user has authorised your application, they will be returned to your application at the URL specified in `redirect_uri` along with the `code` query parameter as the authorisation code.

        Finally, the authorisation code can then be exchanged for an access token and refresh token pair by POSTing to: `https://go.nz.sandbox.zepto.money/oauth/token`

        **Note** The authorisation code is a ONE-TIME use code. It will not work again if you try to POST it a second time.

        | Parameter | Description |
        |-----------|-------------|
        | `grant_type` | Set to `authorization_code` |
        | `client_id` | This is your `Application ID` as generated when you registered your application with Zepto |
        | `client_secret` | This is your `Secret` as generated when you registered your application with Zepto |
        | `code` | The authorisation code returned with the user (ONE-TIME use) |
        | `redirect_uri` | Same URL used in step 3 |

    4. **Wrap-up**

        Now that you have an access token and refresh token, you can interact with the Zepto API as the user related to the access token.
        To do so, you must simply append the access token to the header of any API request: `Authorization: Bearer {access_token}`


    ## OAuth grant flow tutorial

    The OAuth grant flow process is demonstrated using Postman in the steps
    below.


    Before you start, load up our API collection:


    [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/10584592-0037eee4-4a63-4d1a-875f-37ae6bcbf07e?action=collection%2Ffork&collection-url=entityId%3D10584592-0037eee4-4a63-4d1a-875f-37ae6bcbf07e%26entityType%3Dcollection%26workspaceId%3D6400ea2b-bb46-421e-a88c-a8625653c35a#?env%5BNZ%20Zepto%20Public%20Sandbox%5D=W3sia2V5Ijoic2l0ZV9ob3N0IiwidmFsdWUiOiJodHRwczovL256LmdvLnNhbmRib3guemVwdG8ubW9uZXkiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiJodHRwczovL256LmdvLnNhbmRib3guemVwdG8ubW9uZXkiLCJzZXNzaW9uSW5kZXgiOjB9LHsia2V5IjoiYXBpX2hvc3QiLCJ2YWx1ZSI6Imh0dHBzOi8vbnouYXBpLnNhbmRib3guemVwdG8ubW9uZXkiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiJodHRwczovL256LmFwaS5zYW5kYm94LnplcHRvLm1vbmV5Iiwic2Vzc2lvbkluZGV4IjoxfSx7ImtleSI6Im9hdXRoMl9hcHBsaWNhdGlvbl9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwic2Vzc2lvblZhbHVlIjoiIiwic2Vzc2lvbkluZGV4IjoyfSx7ImtleSI6Im9hdXRoMl9zZWNyZXQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6M30seyJrZXkiOiJzY29wZSIsInZhbHVlIjoicHVibGljIGFncmVlbWVudHMgYmFua19hY2NvdW50cyBiYW5rX2Nvbm5lY3Rpb25zIGNvbnRhY3RzIHBheW1lbnRzIHBheW1lbnRfcmVxdWVzdHMgcmVmdW5kX3JlcXVlc3RzIHRyYW5zYWN0aW9ucyByZWZ1bmRzIG9wZW5fYWdyZWVtZW50cyBvZmZsaW5lX2FjY2VzcyIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6InB1YmxpYyBhZ3JlZW1lbnRzIGJhbmtfYWNjb3VudHMgYmFua19jb25uZWN0aW9ucyBjb250YWN0cyBwYXltZW50cyBwYXltZW50X3JlcXVlc3RzIHJlZnVuZF9yZXF1ZXN0cyB0cmFuc2FjdGlvbnMgcmVmdW5kcyBvcGVuX2FncmVlbWVudHMuLi4iLCJzZXNzaW9uSW5kZXgiOjR9LHsia2V5IjoiaXNvODYwMV9ub3ciLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NX0seyJrZXkiOiJhY2Nlc3NfdG9rZW4iLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6Nn0seyJrZXkiOiJyZWZyZXNoX3Rva2VuIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjd9XQ==)


    **A screencast of this process is also available:
    [https://vimeo.com/246203244](https://vimeo.com/246203244).**


    1. **Create a Zepto account**

        If you haven't already, you'll want to create a sandbox Zepto account at [https://go.nz.sandbox.zepto.money](https://go.nz.sandbox.zepto.money)

    2. **Register your application with Zepto**

        Sign in and create an OAuth2 application: [https://go.nz.sandbox.zepto.money/oauth/applications](https://go.nz.sandbox.zepto.money/oauth/applications).

        Use the special Postman callback URL: `https://www.getpostman.com/oauth2/callback`

        [![Zepto OAuth2 app setup](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_app_setup.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_app_setup.png)

    3. **In Postman, setup your environment variables**

        We've included the **Zepto Public Sandbox** environment to get you started. Select it in the top right corner of the window then click the <img class="inline-1" alt="Postman Quick-Look icon" src="https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_quick_look_icon.png" /> icon and click **edit**.


        [![Edit Postman environment](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_edit_environment.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_edit_environment.png)

        Using the details from the OAuth2 app you created earlier, fill in the **oauth2_application_id** & **oauth2_secret** fields.

        [![Fill in environment values](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_environment_values.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_environment_values.png)

    4. **Setup the authorization**

        Click on the **Authorization** tab and select **OAuth 2.0**

        [![Postman Authorization tab](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_authorization_tab.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_authorization_tab.png)

        Click the **Get New Access Token** button

        [![Postman get new access token](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_get_new_access_token.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_get_new_access_token.png)

        Fill in the OAuth2 form as below:

        [![Postman OAuth2](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_oauth2_form.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_oauth2_form.png)

    5. **Get authorised**

        Click **Request Token** and wait a few seconds and a browser window will popup

        Sign in with your Zepto account (or any other Zepto account you want to authorise).

        [![Sign in Zepto to authorise via OAuth2](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_signin.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/split_oauth2_signin.png)

        Click **Authorise** to allow the app to access the signed in account. Once complete, Postman will automatically exchange the authorisation code it received from Zepto for the `access_token/refresh_token` pair. It will then store the `access_token/refresh_token` for you to use in subsequent API requests. The `access_token` effectively allows you to send requests via the API as the user who provided you authorisation.

        [![Authorise OAuth2 app](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/oauth2_app_authorise.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/oauth2_app_authorise.png)

    6. **You're now ready to use the API**

        Select an endpoint from the Zepto collection from the left hand side menu. Before you send an API request ensure you select your access token and Postman will automatically add it to the request header.

        [![Postman use token](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_use_token.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/postman_use_token.png)

    <aside class="notice">Remember to select the access token everytime you try
    a new endpoint. Have fun!</aside>


    ## Authentication and Authorisation


    Zepto uses OAuth2 over https to manage authentication and authorisation.


    OAuth2 is a protocol that lets external applications request permission from
    another Zepto user to send requests on their behalf without getting their
    password.

    This is preferred over Basic Authentication because access tokens can be
    limited by scope and can be revoked by the user at any time.


    New to OAuth2? DigitalOcean has a fantastic 5 minute [introduction to
    OAuth2](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2#grant-type-authorization-code).


    We currently support the **authorisation code** and **refresh token**
    grants.


    ### Authorisation Code Grant

    This type of grant allows your application to act on behalf of a user. If
    you've ever used a website or application with your

    Google, Twitter or Facebook account, this is the grant being used.


    See the [Get Started guide](/#get-started) for step by step details on how
    to use this grant.


    ### Refresh Token Grant


    > Code sample


    ```

    curl -F "grant_type=refresh_token" \
         -F "client_id={{oauth2_application_id}}" \
         -F "client_secret={{oauth2_application_secret }}" \
         -F "refresh_token={{refresh_token}}" \
         -X POST https://go.nz.sandbox.zepto.money/oauth/token
    ```


    > Example response


    ```json

    {
        "access_token": "ad0b5847cb7d254f1e2ff1910275fe9dcb95345c9d54502d156fe35a37b93e80",
        "token_type": "bearer",
        "expires_in": 7200,
        "refresh_token": "cc38f78a5b8abe8ee81cdf25b1ca74c3fa10c3da2309de5ac37fde00cbcf2815",
        "scope": "public"
    }

    ```


    When using the authorisation code grant above, Zepto will return a `refresh
    token` along with the access token. Access tokens are short lived and last 2
    hours but refresh tokens do not expire.


    When the access token expires, instead of sending the user back through the
    authorisation flow you can use the refresh token to retrieve a new access
    token with the same permissions as the old one.


    <aside class="notice">
      The <code>refresh_token</code> gets regenerated and sent alongside the new <code>access_token</code>. In other words, <code>refresh_token</code>s are single use so you'll
    want to store the newly generated <code>refresh_token</code> everytime you
    use it to get a new <code>access_token</code>

    </aside>

    ## Making payments

    In order to payout funds, you'll be looking to use the
    [Payments](/#Zepto-API-Payments) endpoint. Whether you're paying out another
    Zepto account holder or anyone, the process is the same:


    1. Add the recipient to your [Contact](/#add-a-contact) list.

    2. [Make a Payment](/#make-a-payment) to your Contact.


    Common use cases:


    * Automated payout disbursement (Referal programs, net/commission payouts,
    etc...)

    * Wage payments

    * Gig economy payments

    * Lending


    ## Getting paid


    ### POSTing a [Payment Request](/#Zepto-API-Payment-Requests)


    Provides the ability to send a Payment Request (get paid) to any Contact
    that has an accepted Agreement in place.


    To send a Payment Request to a Contact using the API, you must
    first have an accepted [Agreement](/#Zepto-API-Agreements) with them.


    To do so, you can send them an
    [Open Agreement link](https://help.split.cash/agreements/open-agreement) or
    [Unassigned Agreement
    link](http://help.split.cash/agreements/unassigned-agreement) for them to
    [elect & verify their bank
    account](https://help.split.cash/bank-accounts/instant-account-verification-iav)
    and accept the Agreement.


    Having this in place will allow any future Payment
    Requests to be automatically approved and processed as per the Agreement terms.


    Common use cases:


    * Subscriptions

    * On-account balance payments

    * Bill smoothing

    * Repayment plans


    Example flow embedding an [Open Agreement
    link](https://help.split.cash/agreements/open-agreement) using an iFrame in
    order to automate future Payment Request approvals:


    [![Hosted Open
    Agreement](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/host_oa.png)](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/host_oa.png)


    ## Idempotent requests


    > Example response


    ```json

    {
      "errors": [
        {
          "title": "Duplicate idempotency key",
          "detail": "A resource has already been created with this idempotency key",
          "links": {
            "about": "https://docs.split.cash/"
          },
          "meta": {
            "resource_ref": "PB.1a4"
          }
        }
      ]
    }

    ```


    The Zepto API supports idempotency for safely retrying requests without
    accidentally performing the same operation twice.

    For example, if a [Payment](#Zepto-API-Payments) is `POST`ed and a there is
    a network connection error, you can retry the Payment with the same
    idempotency key to guarantee that only a single Payment is created.


    To perform an idempotent request, provide an additional `Idempotency-Key:
    <key>` header to the request.

    You can pass any value as the key but we suggest that you use [V4
    UUIDs](https://www.uuidtools.com/generate/v4) or another appropriately random
    string.


    Keys expire after 24 hours. If there is a subsequent request with the same
    idempotency key within the 24 hour period, we will return a `409 Conflict`.


    * The `meta.resource_ref` value is the reference of the resource that was
    previously created with the conflicting idempotency key.

    * The `Idempotency-Key` header is optional but recommended.

    * Only the `POST` action for the Payments, Payment Requests and Refunds endpoints
    support the use of the `Idempotency-Key`.

    * Endpoints that use the `GET` or `DELETE` actions are idempotent by nature.

    * A request that quickly follows another with the same idempotency key may return
    with `503 Service Unavailable`. If so, retry the request after the number of seconds
    specified in the `Retry-After` response header.


    ## Error responses


    > Example detailed error response


    ```json

    {
      "errors": [
        {
          "title": "A Specific Error",
          "detail": "Details about the error",
          "links": {
            "about": "https://docs.split.cash/..."
          }
        }
      ]
    }

    ```

    > Example resource error response


    ```json

    {
      "errors": "A sentence explaining error/s encounted"
    }

    ```

    The Zepto API returns two different types of error responses depending on the context.


    **Detailed error responses** are returned for:


    * Authentication

    * Request types

    * Idempotency


    All other errors relating to Zepto specific resources(e.g. Contacts) will return the **Resource error response** style.

    <div class="middle-header">403 errors</div>


    **403 errors** are generally returned from any of our endpoints if your
    application does not have the required authorisation. This is usually due to:


    * An [invalid/expired `access_token`](/#authentication-and-authorisation); or

    * The required **scopes** not being present when setting up your [OAuth application](https://go.nz.sandbox.zepto.money/oauth/applications); or

    * The required **scopes** not being present in the [authorisation code link](/#oauth-grant-flow) used to present your user with an authorisation request.


    ## Speeding up onboarding

    Consider the following scenario:


    <blockquote class="main-quote">Zepto is integrated in your application to
    handle payments.<br>A customer would like to use Zepto but does not yet have
    Zepto account.<br>You already have some information about this
    customer.</blockquote>


    Given the above, in a standard implementation where a customer enables/uses
    Zepto within your application, these are the steps they would follow:


    1. Click on some sort of button within your app to use Zepto.

    2. They get redirected to the Zepto sign in page (possibly via a popup or
    modal).

    3. Since they don't yet have a Zepto account, they would click on sign up.

    4. They would fill in all their signup details and submit.

    5. They would be presented with the [authorisation
    page](https://raw.githubusercontent.com/zeptofs/public_assets/master/images/oauth2_app_authorise.png).

    6. They would click the "Authorise" button and be redirected to your app.


    Whilst not too bad, we can do better!


    In order to speed up the process, we allow query string params to be
    appended to the [authorisation URL](/#get-started). For instance, if we
    already have some information about the customer and know they probably
    don't have a Zepto account, we can embed this information in the
    authorisation URL.


    **Supported query string parameters**


    | Parameter | Description |

    |-----------|--------|

    | `landing`   | Accepted value: `sign_up`.
    What page the user should see first if not already signed in. Default is the
    sign in page.
    <br><br>Deprecated values: `business_sign_up`, `personal_sign_up`.|

    | `nickname` | Only letters, numbers, dashes and underscores are permitted.
    This will be used to identify the account in Zepto. |

    | `name` | Business account only. Business name. |

    | `abn` | Business account only. Business ABN. |

    | `phone` | Business account only. Business phone number. |

    | `street_address` | |

    | `suburb` | |

    | `postcode` | |

    | `first_name` | |

    | `last_name` | |

    | `mobile_phone` | |

    | `email` | |


    All values should be [URL
    encoded](https://en.wikipedia.org/wiki/Query_string#URL_encoding).


    As an example, the following authorisation URL would display the **personal
    sign up** & prefill the first name field with **George**:

    `https://go.nz.sandbox.zepto.money/oauth/authorize?response_type=code&client_id=xxx&redirect_uri=xxx&scope=xxx&landing=sign_up&first_name=George`


    You can also pass the values directly to the sign up page outside of the
    OAuth2 authorisation process. Click on the following link to see the values
    preloaded:
    [https://go.nz.sandbox.zepto.money/business/sign_up?name=GeorgeCo&nickname=georgeco&first_name=George](https://go.nz.sandbox.zepto.money/business/sign_up?name=GeorgeCo&nickname=georgceco&first_name=George).


    # Sandbox Testing Details


    > Example failure object


    ```json

    {
      "failure": {
          "code": "E105",
          "title": "Account Not Found",
          "detail": "The target account number is incorrect."
      }
    }

    ```

    Try out your happy paths and not-so happy paths; the sandbox is a great place to get started without transferring actual funds.
    All transactions are simulated and no communication with financial institutions is performed.


    The sandbox works on a 1 minute cycle to better illustrate how transactions are received and the lifecyle they go through.
    In other words, every minute, we simulate communicating with financial institutions and update statuses and events accordingly.


    All 6 digits BSBs are valid in the sandbox with the exception of `100000`. This BSB allows you to simulate the adding of an invalid BSB.
    In production, only real BSBs are accepted.


    Failed transactions will contain the following information inside the event:


    * Failure Code

    * Failure Title

    * Failure Details


    ## DE Transaction failures

    ### [NEW] Using failure codes

    <aside class="notice">
      <ul>
          <li><a href="#de-credit-failures">DE credit failure codes</a></li>
          <li><a href="#de-debit-failures">DE debit failure codes</a></li>
      </ul>
    </aside>


    To simulate a transaction failure, create a Payment or Payment Request with an amount corresponding to the desired [failure code](#failure-codes).


    For example:


    * DE amount `$1.05` will cause the credit transaction to fail, triggering the credit failure code `E105` (Account Not Found).

    * DE amount `$2.03` will cause the debit transaction to fail, triggering the debit failure code `E203` (Account Closed).



    ### Example scenarios

      1. Pay a contact with an invalid account number:
        * Initiate a Payment for <code>$1.05</code>.
        * Zepto will mimic a successful debit from your bank account.
        * Zepto will mimic a failure to credit the contact's bank account.
        * Zepto will automatically create a <code>payout_reversal</code> credit transaction back to your bank account.
      2. Request payment from a contact with a closed bank account:
        * Initiate a Payment Request for <code>$2.03</code>.
        * Zepto will mimic a failure to debit the contact's bank account.

    ### [DEPRECATED] Using failure reasons

    To simulate [transaction failures](#failure-reasons) create a Payment or Payment Request with a specific amount listed in the table.


    | Transaction failure reason | Debit | Credit |

    |----------------------------|-------|--------|

    | `invalid_bsb_number`       |  $0.01  |  $0.51   |

    | `account_closed`           |  $0.02  |  $0.52   |

    | `customer_deceased`        |  $0.03  |  $0.53   |

    | `incorrect_account_number` |  $0.04  |  $0.54   |

    | `refer_to_split`           |  $0.05  |  $0.55   |

    | `user_voided`              |  $0.06  |  $0.56   |

    | `admin_voided`             |  $0.07  |  $0.57   |

    | `refer_to_customer`        |  $0.10  |          |

    | `insufficient_funds`       |  $0.11  |          |

    | `payment_stopped`          |  $0.12  |          |


    ### [DEPRECATED] Example scenarios

      1. Pay a contact with an invalid account number:
        * Initiate a Payment for <code>$0.54</code>.
        * Zepto will mimic a successful debit from your bank account.
        * Zepto will mimic a failure to credit the contact's bank account.
        * Zepto will automatically create a <code>payout_reversal</code> credit transaction back to your bank account.
      2. Pay a contact whilst having insufficient funds:
        * Initiate a Payment for <code>$0.11</code>.
        * Zepto will mimic a failure to debit your bank account.
        * Zepto will mark the debit as `returned` due to `insufficient_funds`.
        * Zepto will void the scheduled credit to the contact's bank account.
      3. Request payment from a contact with a closed bank account:
        * Initiate a Payment Request for <code>$0.02</code>.
        * Zepto will mimic a failure to debit the contact's bank account.


    ## Instant account verification accounts

    When using any of our hosted solutions ([Payment
    Requests](https://help.split.cash/payment-requests/open-payment-requests),
    [Open Agreements](https://help.split.cash/agreements/open-agreement) or
    [Unassigned
    Agreements](http://help.split.cash/agreements/unassigned-agreement)) you may
    want to test the [Instant Account Verification
    (IAV)](http://help.split.cash/bank-accounts/instant-account-verification-iav)
    process where we accept online banking credentials to validate bank account
    access. To do so, you can use the following credentials:


    | Login | Password |

    |-------|----------|

    | `12345678` | `TestMyMoney` |


    <aside class="notice">The credentials will work with any of the available
    financial institutions.</aside>

    ## Available balances in the Sandbox

    If your integration includes allowing us to pre-fail transactions prior to being processed, you may want to test that your system is handling these events correctly.
    A transaction will pre-fail when the available balance of the customers account is less than the amount of the payment being requested.
    This is checked during pre-processing just before your debit is sent for processing if there is an active bank connection.


    In the Sandbox environment, if the contact you are attempting to debit has a bank connection that was created through our Instant Account Verification feature, the
    available balance of any **Transactional** bank account will always be `$123.45`. Any payment requests above this amount will pre-fail and any amount
    less than or equal to this amount will succeed.

    # Configuration

    ## Scopes

    Scopes define the level of access granted via the OAuth2 authorisation
    process. As a best practice, only use the scopes your application will
    require.


    | Scope | Description |

    |--------|------------|

    | `public` | View user's public information |

    | `agreements` | Manage user's Agreements |

    | `bank_accounts` | Manage user's Bank Accounts |

    | `contacts` | Manage user's Contacts |

    | `open_agreements` | Manage user's Open Agreements |

    | `payments` | Manage user's Payments |

    | `payment_requests` | Manage user's Payment Requests |

    | `refunds` | Manage user's Refunds |

    | `transactions` | Access user's Transactions |

    | `offline_access` | Create non-expiring access tokens for user |

      <aside class="notice">Please use `offline_access` with discretion, as you'll have no direct way to invalidate the token. Please contact Zepto immediately if any token may have potentially been compromised.</aside>

    ## Pagination


    > Example response header


    ```

    Link: <http://api.nz.sandbox.zepto.money/contacts?page=5>; rel="last",
    <http://api.nz.sandbox.zepto.money/contacts?page=2>; rel="next"

    Per-Page: 25

    Total: 5

    ```


    All collections are paginated to 25 items by default and the pagination
    information may be found in the response header. You can customise the pagination by appending `?per_page=x` and/or `?page=x` to the endpoint URL.


    <aside class="notice">The maximum <code>per_page</code> value is <code>100</code>. Any value above this will be ignored and <code>100</code> will be used instead.</aside>


    ## Remitter


    > Example request


    ```json

    {
      "...": "...",
      "metadata": {
       "remitter": "CustomRem"
       }
    }

    ```


    You can elect to assign a remitter name on a per-request basis when
    submitting Payments & Payment Requests. Simply append the `remitter` key and
    a value within the `metadata` key.


    * **For Payments**, the party being credited will see the designated
    remitter name along the entry on their bank statement.

    * **For Payment Requests**, the party being debited will see the designated
    remitter name along the entry on their bank statement.


    <aside class="notice">The remitter name MUST be between <code>3</code> and <code>16</code>
    characters.</aside>


    ## Aggregation


    Zepto will automatically aggregate debits that are:


    - From the same bank account; and

    - Have the same description; and

    - Initiated by the same Zepto account.

    Likewise for credits:


    - To the same bank account; and

    - Have the same description; and

    - Initiated by the same Zepto account.


    Should you prefer debit aggregation to be disabled, please contact
    [support@zepto.com.au](mailto:support@zepto.com.au). Note
    that additional charges may apply.


    ## Webhooks


    > Example response


    ```json

    {
      "event": {
        "type": "object.action",
        "at": "yyyy-mm-ddThh:mm:ssZ",
        "who": {
          "account_id": "x",
          "bank_account_id": "x"
        }
      },
      "data": [
        {}
      ]
    }

    ```

    Please refer to our help centre [article on webhooks](http://help.split.cash/en/articles/3303626-webhooks) for more information and an overview of what you can achieve with webhooks.


    We support two main categories of webhooks:


    1. **Owner**: These webhooks are managed by the owner of the Zepto account
    and only report on events owned by the Zepto account.

    2. **App**: These webhooks are managed by the Zepto OAuth2 application owner
    and will report on events relating to any authorised Zepto account (limited
    by scope).


    | Name | Type | Required | Description |

    |-|-|-|-|

    | event | object | true | Webhook event details |

    | Â» type | string | true | The webhook event key (list available in the webhook settings) |

    | Â» at | string(date-time) | true | When the event occurred |

    | Â» who | object | true | Who the webhook event relates to |

    | Â»Â» account_id | string(uuid) | true | The Zepto account who's the owner of the event |

    | Â»Â» bank_account_id | string(uuid) | true | The above Zepto account's bank account |

    | data | [object] | true | Array of response bodies |


    ### Data schemas

    Use the following table to discover what type of response schema to expect for for the `data.[{}]` component of the webhook delivery.


    | Event                    | Data schema                                                               |

    |--------------------------|---------------------------------------------------------------------------|

    | `agreement.*`            | [GetAnAgreementResponse](/#schemagetagreementresponse)                    |

    | `contact.*`              | [GetAContactResponse](/#schemagetacontactresponse)                        |

    | `credit.*`               | [ListAllTransactionsResponse](/#schemalistalltransactionsresponse)        |

    | `creditor_debit.*`       | [ListAllTransactionsResponse](/#schemalistalltransactionsresponse)        |

    | `debit.*`                | [ListAllTransactionsResponse](/#schemalistalltransactionsresponse)        |

    | `debtor_credit.*`        | [ListAllTransactionsResponse](/#schemalistalltransactionsresponse)        |

    | `open_agreement.*`       | [ListAllOpenAgreementsRespose](/#schemalistallopenagreementsresponse)     |

    | `payment.*`              | [GetAPaymentResponse](/#schemagetapaymentresponse)                        |

    | `payment_request.*`      | [GetAPaymentRequestResponse](/#schemagetapaymentrequestresponse)          |

    | `unassigned_agreement.*` | [GetAnUnassignedAgreementResponse](#schemagetunassignedagreementresponse) |


    ### Our Delivery Promises

    1. We only consider a webhook event delivery as failed if we don't receive any http response code (2xx, 4xx, 5xx, etc.)

    2. We will auto-retry failed deliveries every 5 minutes for 1 hour.

    3. Delivery order for webhook events is not guaranteed.

    4. We guarantee at least 1 delivery attempt.


    **For redelivery of webhooks, check out our [Webhook/WebhookDelivery API endpoints](#Zepto-API-Webhooks).**

    <aside class="notice">
      In the sandbox environment, webhook deliveries will only be retried once,
      to allow for easier testing of failure scenarios.
    </aside>


    ### Request ID


    > Example header


    ```

    Split-Request-ID: 07f4e8c1-846b-5ec0-8a25-24c3bc5582b5

    ```


    Zepto provides a `Split-Request-ID` header in the form of a `UUID` which
    uniquely identifies a webhook event. If the webhook event is
    retried/retransmitted by Zepto, the UUID will remain the same. This allows
    you to check if a webhook event has been previously handled/processed.


    ### Checking Webhook Signatures


    > Example header


    ```

    Split-Signature:
    1514772000.93eee90206280b25e82b38001e23961cba4c007f4d925ba71ecc2d9804978635

    ```


    Zepto signs the webhook events it sends to your endpoints. We do so by
    including a signature in each eventâ€™s `Split-Signature` header. This allows
    you to validate that the events were indeed sent by Zepto.


    Before you can verify signatures, you need to retrieve your endpointâ€™s
    secret from your Webhooks settings. Each endpoint has its own unique secret;
    if you use multiple endpoints, you must obtain a secret for each one.


    The `Split-Signature` header contains a timestamp and one or more
    signatures. All separated by `.` (dot).


    > Example code


    ```sh

    # Shell example is not available

    ```


    ```go

    package main

    import (
        "crypto/hmac"
        "crypto/sha256"
        "strings"
        "fmt"
        "encoding/hex"
    )

    func main() {
        secret := "1234"
        message := "full payload of the request"
        splitSignature := "1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f"

        data := strings.Split(splitSignature, ".")
        timestamp, givenSignature := data[0], data[1]

        signedPayload := timestamp + "." + message

        hash := hmac.New(sha256.New, []byte(secret))
        hash.Write([]byte(signedPayload))
        expectedSignature := hex.EncodeToString(hash.Sum(nil))

        fmt.Println(expectedSignature)
        // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f
        fmt.Println(givenSignature)
        // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f
    }

    ```


    ```python

    import hashlib

    import hmac


    split_signature = '1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f'

    secret = bytes('1234').encode('utf-8')

    message = bytes('full payload of the request').encode('utf-8')


    data = split_signature.split('.')

    timestamp = data[0]

    given_signature = data[1]


    signed_payload = timestamp + '.' + message


    expected_signature = hmac.new(secret, signed_payload,
    digestmod=hashlib.sha256).hexdigest()


    print(expected_signature)

    # > f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f


    print(given_signature)

    # > f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

    ```


    ```ruby

    require 'openssl'


    split_signature =
    '1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f'

    secret = '1234'

    message = 'full payload of the request'


    timestamp, given_signature, *other = split_signature.split('.')

    signed_payload = timestamp + '.' + message

    expected_signature = OpenSSL::HMAC.hexdigest('sha256', secret,
    signed_payload)


    puts(expected_signature)

    # => f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

    puts(given_signature)

    # => f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

    ```


    ```javascript--node

    var crypto = require('crypto')

    var message = 'full payload of the request'

    var secret = '1234'

    var splitSignature =
    '1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f'


    var data = splitSignature.split('.')

    var timestamp = data[0]

    var givenSignature = data[1]


    var signedPayload = timestamp + '.' + message


    var expectedSignature = crypto.createHmac('sha256',
    secret).update(signedPayload).digest('hex')


    console.log(expectedSignature)

    // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

    console.log(givenSignature)

    // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f


    ```


    ```php

    $split_signature = '1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f';

    $secret = '1234';

    $message = 'full payload of the request';


    list($timestamp, $given_signature, $other) = explode('.', $split_signature);

    $signed_payload = $timestamp . "." . $message;

    $expected_signature = hash_hmac('sha256', $signed_payload, $secret, false);


    echo $expected_signature;
    // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

    echo "\n";

    echo $given_signature;
    // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f


    ```


    ```java

    import javax.crypto.Mac;

    import javax.crypto.spec.SecretKeySpec;


    class Main {
      public static void main(String[] args) {
        try {
          String splitSignature = "1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f";
          String secret = "1234";
          String message = "full payload of the request";


          String[] data = splitSignature.split("\\.");
          String timestamp = data[0];
          String givenSignature = data[1];

          String signedPayload = timestamp + "." + message;

          Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
          SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), "HmacSHA256");
          sha256_HMAC.init(secret_key);

          String expectedSignature = javax.xml.bind.DatatypeConverter.printHexBinary(sha256_HMAC.doFinal(signedPayload.getBytes())).toLowerCase();

          System.out.println(expectedSignature);
          // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

          System.out.println(givenSignature);
          // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f
        }
        catch (Exception e){
          System.out.println("Error");
        }
      }
    }



    ```

    <!--
    This example is commented out since the docs do not include C#

    ```csharp

    using System;
    using System.Security.Cryptography;

    class MainClass {
      public static void Main (string[] args) {
        var splitSignature = "1514772000.f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f";
        var secret = "1234";
        var message = "full payload of the request";

        var header = splitSignature.Split('.');
        var timeStamp = header[0];
        var givenSignature = header[1];

        var signedPayload = timeStamp + "." + message;

        var encoding = new System.Text.ASCIIEncoding();
        var hmacsha256 = new HMACSHA256(encoding.GetBytes(secret));

        byte[] hashmessage = hmacsha256.ComputeHash(encoding.GetBytes(signedPayload));
        var expectedSignature = BitConverter.ToString(hashmessage).Replace("-", "").ToLower();

        Console.WriteLine(expectedSignature);
        // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f

        Console.WriteLine(givenSignature);
        // f04cb05adb985b29d84616fbf3868e8e58403ff819cdc47ad8fc47e6acbce29f
      }
    }


    ```

    -->


    **Step 1. Extract the timestamp and signatures from the header**


    Split the header, using the `.` (dot) character as the separator, to get a
    list of elements.


    | Element | Description |

    |---------|-------------|

    | `timestamp` | [Unix time](https://en.wikipedia.org/wiki/Unix_time) in
    seconds when the signature was created |

    | `signature` | Request signature |

    | `other`     | Placeholder for future parameters (currently not used) |


    **Step 2: Prepare the signed_payload string**


    You achieve this by concatenating:


    - The timestamp from the header (as a string)

    - The character `.` (dot)

    - The actual JSON payload (request body)


    **Step 3: Determine the expected signature**


    Compute an HMAC with the SHA256 hash function. Use the endpointâ€™s signing
    secret as the key, and use the `signed_payload` string as the message.


    **Step 4: Compare signatures**


    Compare the signature in the header to the expected signature. If a
    signature matches, compute the difference between the current timestamp and
    the received timestamp, then decide if the difference is within your
    tolerance.


    To protect against timing attacks, use a constant-time string comparison to
    compare the expected signature to each of the received signatures.


    <aside class="notice">The sandbox environment allow both HTTP and HTTPS webhook URLs. The live environment however will only POST to HTTPS URLs.</aside>


    # Changelog

    We take backwards compatibility seriously. The following list contains backwards compatible changes:


    - **2022-01-21** - Reduced webhook delivery retries on sandbox to a single retry

    - **2021-12-01** - Add ref to Webhook Delivery endpoint

    - **2021-10-08** - Introduced improved transaction failure messaging (code, title and detail)

    - **2021-09-29** - Added/expanded sandbox-only endpoints for simulating incoming payments

    - **2021-09-08** - Added Webhooks and Webhook Delivery endpoints

    - **2021-08-31** - Added PayID pool references to */contacts/receivable* and */bank_accounts* endpoints

    - **2021-07-01** - Added $1.65 amount for Sandbox simulated failures and minor tweaks

    - **2021-06-08** - Added Transfers, Payment Channel selection, Receivable Refunds

    - **2021-05-21** - Added new Payment Request endpoints, updated Postman collection

    - **2021-05-03** - Deprecated */payments_requests/outgoing* endpoint

    - **2021-04-20** - Removed deprecated API references, refreshed Refunds and Payout descriptions

    - **2021-03-17** - Remove note indicating single active bank account limitation

    - **2021-03-12** - Add ref to GetAContactResponse

    - **2021-02-24**Â - Added details on enabling the Receivable Contact feature and amended the POST/contacts/receivable response body

    - **2020-12-17** - Add Sandbox Only API endpoints

    - **2020-12-17** - Enhance response schema for several endpoints

    - **2020-12-16** - Add webhook schema table

    - **2020-12-15** - Improve webhooks section

    - **2020-12-15** - Re-word Payment Requests introduction to better cover its use with Receivable Contacts.

    - **2020-12-15** - Add changelog


    Looking for more? Our docs are open sourced! [https://github.com/zeptofs/api-documentation](https://github.com/zeptofs/api-documentation)
  version: '1.0'
servers:
  - url: 'https://api.nz.sandbox.zepto.money'
    description: Sandbox API server
  - url: 'https://api.nz.zepto.money'
    description: Production API server
tags:
  - name: Agreements
    description: >
      An Agreement is an arrangement between two parties that allows them to
      agree on terms for which future Payment Requests will be auto-approved.


      Zepto Agreements are managed on a per Contact basis, and if a Payment Request
      is sent for an amount that exceeds the terms of the agreement, it will not be created.

      Please refer to the [What is an Agreement](http://help.split.cash/articles/3094575-what-is-an-agreement) article in our knowledge base for an overview.

      <div class="middle-header">Direction</div>


      Agreements are therefore broken up by direction:


      1. **Outgoing:** Agreement sent to one of your Contacts

      2. **Outgoing:** Agreement sent to another Zepto account [Deprecated]

      3. **Incoming:** Agreement received from another Zepto account [Deprecated]


      ##Lifecycle


      An Agreement can have the following statuses:


      | Status | Description |

      |-------|-------------|

      | `proposed` | Waiting for the Agreement to be accepted or declined. |

      | `accepted` | The Agreement has been accepted and is active. |

      | `cancelled` | The Agreement has been cancelled (The initiator or
      authoriser can cancel an Agreement). |

      | `declined` | The Agreement has been declined. |

      | `expended` | The Agreement has been expended (Only for [single_use Unassigned Agreements](/#Zepto-API-Unassigned-Agreements)). |
  - name: Bank Accounts
    description: |
      Your currently linked up bank accounts.
  - name: Contacts
    description: >
      Your Contacts form an address book of parties with whom you can interact.
      In order to initiate any type of transaction you must first have the party
      in your Contact list.


      <aside class="notice">In the case of Open Agreements, the authorising
      party will be automatically added to your Contacts list.</aside>
  - name: Open Agreements
    description: >
      An Open Agreement is essentially an Agreement template with no specific
      authoriser. Each time an Open Agreement is accepted by either a Zepto
      account holder or anyone, the authoriser is added to your Contacts list
      and a new Agreement is automatically created between the Open Agreement
      initiator and the authoriser.


      An Open Agreement can be accepted multiple times by different parties and
      the result is the same: A new Agreement. Additionally, an Open Agreement
      can be accepted by anybody, not just other Zepto users. This is achieved
      by using our [Instant Account Verification
      process](http://help.split.cash/bank-accounts/instant-account-verification-iav)
      as part of accepting an [Open
      Agreement](https://help.split.cash/agreements/open-agreement).

      ##Lifecycle


      An Open Agreement can have the following statuses:


      | Status | Description |

      |-------|-------------|

      | `active` | The Open Agreement can be viewed and accepted. |

      | `closed` | The Open Agreement can not be viewed or accepted. |


      <aside class="notice">When you close an Open Agreement, no new Agreements
      can be created from it and all past Agreement resulting from the
      acceptance of the Open Agreement are unaffected.</aside>
  - name: Payments
    description: >
      A Payment is used to disburse funds to your Contacts.


      ##Lifecycle

      > Example payout reversal response


      ```json

      {
        "data": [
        {
          "ref": "C.3",
          "parent_ref": "PB.1",
          "type": "credit",
          "category": "payout_reversal",
          "created_at": "2021-04-07T23:15:00Z",
          "matures_at": "2021-04-07T23:15:00Z",
          "cleared_at": null,
          "bank_ref": null,
          "status": "maturing",
          "status_changed_at": "2016-12-08T23:15:00Z",
          "party_contact_id": "26297f44-c5e1-40a1-9864-3e0b0754c32a",
          "party_name": "Sanford-Rees",
          "party_nickname": "sanford-rees-8",
          "description": "Payout reversal of D.1 for Sanford-Rees due to no account or incorrect account number"
            "amount": 1,
          "reversal_details": {
            "source_debit_ref": "D.1",
            "source_credit_failure_reason": "incorrect_account_number",
          }
        }
        ]
      }

      ```

      A Payment is simply a group of Payouts, therefore it does not have a
      particular status. Its Payouts however have their status regularly
      updated. For a list of possible Payout statuses check out the
      [Transactions](/#Zepto-API-Transactions).

        <aside class="notice">
          Zepto no longer supports multiple Payouts within a single Payment request. A Payment request must only contain 1 Payout object.
        </aside>


      ### Payout Reversal

      When Zepto is unable to credit funds to a recipient, we will automatically create a payout reversal credit back to the payer.
      Furthermore, within the payout reversal credit, Zepto will include details in the `description` and under the `reversal_details` key
      as to why the original credit to the recipient failed.
  - name: Payment Requests
    description: >
      A Payment Request (PR) is used to collect funds, via direct debit, from one of your Contacts (as long as there is an accepted Agreement in place).


      <div class="middle-header">Applicable scenarios</div>


      1. **You send a Payment Request to a [Contact](/#Zepto-API-Contacts) in order to collect funds:**
          1. Given there is an Agreement in place and the Payment Request is within the terms of the Agreement, then it will be automatically approved; **or**
          1. Given the Payment Request is **not** within the terms of the Agreement, then it will not be created; **or**
          1. There is no Agreement in place, then it will not be created.


      ##Lifecycle

      A Payment Request can have the following statuses:


      | Status | Description |

      |-------|-------------|

      | `pending_approval` | Waiting for the debtor to approve the Payment Request. [DEPRECATED] |

      | `unverified` | Waiting for available funds response. |

      | `approved` | The debtor has approved the Payment Request. |

      | `declined` | The debtor has declined the Payment Request. |

      | `cancelled` | The creditor has cancelled the Payment Request. |


      <div class="middle-header">Prechecking</div>


      When using Payment Requests to collect payments from your customer, Zepto will automatically check for available funds before **attempting to debit** the debtor.
      This check is only performed for contacts with an active [bank connection](/#Zepto-API-Bank-Connections).
  - name: Refunds
    description: >

      Refunds can be issued for any successfully completed Payment Request transaction. This includes:


      1. Payment Requests for direct debit payments **(Collections)**:

      2. Payment Requests for funds received via DE **(Receivables)**:


      This allows you to return any funds that were previously collected or received into one of your bank/float accounts.
  - name: Transactions
    description: >
      By default, the transactions endpoint provides a detailed look at all past, current
      and future debits & credits related to your account.


      <aside class="notice">Want to also know about the debits & credits applied to the other party? No problem! Use the <code>both_parties=true</code> query string.</aside>


      ##Lifecycle


      A transaction (debit or credit) can have the following statuses:


      | Status | Description |

      |--------|-------------|

      | `maturing` | The maturation date has not yet been reached. |

      | `matured` | The maturation date has been reached and the transaction is
      eligible for processing. |

      | `preprocessing` | The transaction is undergoing pre-checks before being sent to the bank. |

      | `processing` | The transaction has been submitted to the bank. |

      | `clearing` | Waiting for confirmation from the bank that the transaction
      has succeeded. |

      | `cleared` | The transaction is complete. |

      | `rejected` | The bank has rejected the transaction due to incorrect bank
      account details. |

      | `returned` | The transaction did not successfully clear. |

      | `voided` | The transaction has been cancelled and is no longer eligible
      for processing. |

      | `pending_verification` | The bank account must be verified before the
      transaction can proceed. |

      | `paused` | The transaction has temporary been paused by Zepto pending
      internal review. |

      | `prefailed` | The transaction was never submitted to the bank because we
      detected that there were insufficient funds. The transaction can be
      retried. |

      | `channel_switched` | The initial payment channel has failed and the credit has automatically
      switched to attempt the payment using the next available channel. |

      ## Failure codes

      > Example response


      ```json

      {
        "data": [
          {
            "ref": "D.3",
            "parent_ref": null,
            "type": "debit",
            "category": "payout_refund",
            "created_at": "2021-04-07T23:15:00Z",
            "matures_at": "2021-04-10T23:15:00Z",
            "cleared_at": null,
            "bank_ref": null,
            "status": "returned",
            "status_changed_at": "2021-04-08T23:15:00Z",
            "failure" : {
              "code": "E251",
              "title": "Voided By Initiator",
              "detail": "The transaction was voided by its initiator.",
            },
            "failure_reason": "user_voided",
            "failure_details": "Wrong amount - approved by Stacey"
            "party_contact_id": "26297f44-c5e1-40a1-9864-3e0b0754c32a",
            "party_name": "Sanford-Rees",
            "party_nickname": "sanford-rees-8",
            "description": null,
            "amount": 1,
            "bank_account_id": "56df206a-aaff-471a-b075-11882bc8906a"
          }
        ]
      }

      ```

      The rejected, returned, voided & prefailed statuses are always accompanied by a failure code, title and detail as listed below.

      ### DE credit failures

      | Code | Title | Detail |

      | ------------ | ------------- | -------------- |

      | E101 | Invalid BSB Number | The BSB is not valid or is no longer active. |

      | E102 | Payment Stopped | The target institution has blocked transactions to this account. Please refer to customer. |

      | E103 | Account Closed | The target account is closed. |

      | E104 | Customer Deceased | The target account's owner has been listed as deceased. |

      | E105 | Account Not Found | The target account number is incorrect. |

      | E106 | Refer to Customer | Usually means insufficient funds or that the target account has breached their transaction limits. |

      | E107 | Account Deleted | The target account is deleted. |

      | E108 | Invalid UserID | Please contact Zepto for further information. |

      | E109 | Technically Invalid | Usually means that the account is not debitable or that the reason for failure can not be categorised within the standard BECS return codes. Please refer to customer. |

      | E150 | Voided By Admin | The transaction was voided by an administrator. |

      | E151 | Voided By Initiator | The transaction was voided by its initiator. |

      | E152 | Insufficient Funds | There were insufficient funds to complete the transaction. |

      | E153 | System Error | The transaction was unable to complete. Please contact Zepto for assistance. |

      | E199 | Unknown DE Error | An unknown DE error occurred. Please contact Zepto for assistance. |

      ### DE debit failures

      | Code | Title | Detail |

      | ------------ | ------------- | -------------- |

      | E201 | Invalid BSB Number | The BSB is not valid or is no longer active. |

      | E202 | Payment Stopped | The target institution has blocked transactions to this account. Please refer to customer. |

      | E203 | Account Closed | The target account is closed. |

      | E204 | Customer Deceased | The target account's owner has been listed as deceased. |

      | E205 | Account Not Found | The target account number is incorrect. |

      | E206 | Refer to Customer | Usually means insufficient funds or that the target account has breached their transaction limits. |

      | E207 | Account Deleted | The target account is deleted. |

      | E208 | Invalid UserID | Please contact Zepto for further information. |

      | E209 | Technically Invalid | Usually means that the account is not debitable or that the reason for failure can not be categorised within the standard BECS return codes. Please refer to customer. |

      | E250 | Voided By Admin | The transaction was voided by an administrator. |

      | E251 | Voided By Initiator | The transaction was voided by its initiator. |

      | E252 | Insufficient Funds | There were insufficient funds to complete the transaction. |

      | E253 | System Error | The transaction was unable to complete. Please contact Zepto for assistance. |

      | E299 | Unknown DE Error | An unknown DE error occurred. Please contact Zepto for assistance. |


      ## [DEPRECATED] Failure reasons


      > Example response


      ```json

      {
        "data": [
          {
            "ref": "D.3",
            "parent_ref": null,
            "type": "debit",
            "category": "payout_refund",
            "created_at": "2021-04-07T23:15:00Z",
            "matures_at": "2021-04-10T23:15:00Z",
            "cleared_at": null,
            "bank_ref": null,
            "status": "returned",
            "status_changed_at": "2021-04-08T23:15:00Z",
            "failure_reason": "user_voided",
            "failure_details": "Wrong amount - approved by Stacey"
            "party_contact_id": "26297f44-c5e1-40a1-9864-3e0b0754c32a",
            "party_name": "Sanford-Rees",
            "party_nickname": "sanford-rees-8",
            "description": null,
            "amount": 1,
            "bank_account_id": "56df206a-aaff-471a-b075-11882bc8906a"
          }
        ]
      }

      ```


      The `rejected`, `returned`, `voided` & `prefailed` statuses are always
      accompanied by a `failure_reason`:


      <aside class="notice">Please note that these failure reasons are passed to us directly from the banks.</aside>


      | Reason | Description |

      |--------|-------------|

      | `refer_to_customer` | Usually due to insufficient funds |

      | `insufficient_funds` | Insufficient funds |

      | `payment_stopped` | The payment was stopped at the bank. Can be due to a
      customer requesting a stop payment with their financial institution. |

      | `invalid_bsb_number` | BSB number is invalid |

      | `account_closed` | The bank account is closed |

      | `customer_deceased` | Customer is deceased |

      | `incorrect_account_number` | Account number is incorrect |

      | `refer_to_split` | Failed due to reasons not listed here. Please contact
      us. |

      | `user_voided` | Voided by payout initiator |

      | `admin_voided` | Voided by Zepto admin |


      <aside class="notice">
        The <code>user_voided</code> and <code>admin_voided</code> <code>failure_reasons</code> can sometimes be accompanied by the <code>failure_details</code> key which includes user submitted comments relating to the <code>failure_reason</code>.
      </aside>
  - name: Unassigned Agreements
    description: >
      An agreement with no preset authoriser that can only be accepted once and
      must be accepted within a predefined time period.


      Unassigned Agreements are shared using the generated link available in the
      response body. You can then include it in an email, text message, embed it
      in an iFrame, etc...


      Please refer to the [Unassigned Agreement](http://help.split.cash/agreements/unassigned-agreement)
      article in our knowledge base for more information.
  - name: Users
    description: |
      All about the currently authenticated user.
paths:
  /agreements/outgoing:
    get:
      tags:
        - Agreements
      summary: List Agreements
      description: >-
        By default, all outgoing Agreements will be returned. You can apply
        filters to your query to customise the returned Agreements.
      operationId: ListOutgoingAgreements
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
        - name: authoriser_id
          in: query
          description: 'Authoriser ID (`Contact.data.account.id`), single value, exact match'
          style: form
          schema:
            type: string
          example: 2c4dec90-8a4c-4685-b620-bd1d7ca05a60
        - name: contact_id
          in: query
          description: 'Contact ID (`Contact.data.id`), single value, exact match'
          style: form
          schema:
            type: string
          example: e5edc264-1771-4809-9cf5-b40baaee15f7
        - name: status
          in: query
          description: Exact match
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            enum:
              - proposed
              - accepted
              - declined
              - cancelled
          example:
            - proposed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOutgoingAgreementsResponse'
  '/agreements/{agreement_ref}':
    get:
      tags:
        - Agreements
      summary: Get an Agreement
      description: Get a single Agreement by its reference
      operationId: GetAgreement
      parameters:
        - name: agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: A.2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAgreementResponse'
    delete:
      tags:
        - Agreements
      summary: Cancel an Agreement
      description: >-
        An Agreement can be cancelled by the initiator at any time whilst the
        authoriser (Agreement recipient) can only cancel a previously accepted
        Agreement.
      operationId: CancelAgreement
      parameters:
        - name: agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: A.2
      responses:
        '204':
          description: No Content
  /bank_accounts:
    get:
      tags:
        - Bank Accounts
      summary: List all Bank Accounts
      description: >
        By default, all Bank Accounts will be returned.
      operationId: ListAllBankAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllBankAccountsResponse'
  /contacts/anyone:
    post:
      tags:
        - Contacts
      summary: Add a Contact
      description: >
        Use this endpoint when you want to pay somebody.


        <aside class="notice">
          A Contact added this way cannot be debited.
        </aside>
      operationId: AddAnAnyoneContact
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAnAnyoneContactRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAnAnyoneContactResponse'
  /contacts:
    get:
      tags:
        - Contacts
      summary: List all Contacts
      description: >
        By default, all Contacts will be returned. You can apply filters to your
        query to customise the returned Contact list.
      operationId: ListAllContacts
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
        - name: name
          in: query
          description: 'Single value, string search'
          style: form
          schema:
            type: string
          example: Some name
        - name: nickname
          in: query
          description: 'Single value, string search'
          style: form
          schema:
            type: string
          example: Some_nickname
        - name: email
          in: query
          description: 'Single value, string search'
          style: form
          schema:
            type: string
          example: george@gmail.com
        - name: bank_account_id
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: 095c5ab7-7fa8-40fd-b317-cddbbf4c8fbc
        - name: bank_account_branch_code
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: 020018
        - name: bank_account_account_number
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: '4395959'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllContactsResponse'
  '/contacts/{id}':
    get:
      tags:
        - Contacts
      summary: Get a Contact
      description: Get a single Contact by its ID
      operationId: GetAContact
      parameters:
        - name: id
          in: path
          description: Contact ID (`Contact.data.id`)
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: UUID
          example: 55afddde-4296-4daf-8e49-7ba481ef9608
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAContactResponse'
        '404':
          description: Not Found
    delete:
      tags:
        - Contacts
      summary: Remove a Contact
      description: >
        <aside class="notice">
          <ul>
            <li>Removing a Contact will not affect your transaction history.</li>
          </ul>
        </aside>
      operationId: RemoveAContact
      parameters:
        - name: id
          in: path
          description: Contact ID (`Contact.data.id`)
          required: true
          style: simple
          schema:
            type: string
            format: UUID
          example: 55afddde-4296-4daf-8e49-7ba481ef9608
      responses:
        '204':
          description: ''
    patch:
      tags:
        - Contacts
      summary: Update a Contact
      description: >
        You can update the name, email, bank account and metadata of any Contact.

        <aside class="notice">
          <ul>
            <li>Previous transactions to this Contact will retain the name and bank account that was used at the time.</li>
            <li>You cannot update a Contact's bank account details if they currently have an accepted agreement.</li>
            <li>See our [Help Article](https://help.split.cash/en/articles/3829211-how-do-i-change-my-customers-bank-account-details) for more information about the nuances and implications of changing a contacts Bank Account.</li>
          </ul>
        </aside>
      operationId: UpdateAContact
      parameters:
        - name: id
          in: path
          description: Contact ID (`Contact.data.id`)
          required: true
          style: simple
          schema:
            type: string
          example: 55afddde-4296-4daf-8e49-7ba481ef9608
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAContactRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAContactResponse'
        '404':
          description: Not Found
  /open_agreements:
    post:
      tags:
        - Open Agreements
      summary: Create an Open Agreement
      description: >-
        Create an Open Agreement that can be accepted by anyone.


        <aside class="notice">You can set any of the term metrics to
        <code>null</code> if you wish them to not have a limit.</aside>
      operationId: CreateOpenAgreement
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOpenAgreementRequest'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOpenAgreementResponse'
    get:
      tags:
        - Open Agreements
      summary: List all Open Agreements
      description: By default, all Open Agreements will be returned.
      operationId: ListAllOpenAgreements
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllOpenAgreementsResponse'
  '/open_agreements/{open_agreement_ref}/activate':
    post:
      tags:
        - Open Agreements
      summary: Activate a closed Open Agreement
      description: Allow the Open Agreement to viewed and accepted.
      operationId: ActivateOpenAgreement
      parameters:
        - name: open_agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: OA.1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateOpenAgreementResponse'
  '/open_agreements/{open_agreement_ref}/close':
    post:
      tags:
        - Open Agreements
      summary: Close an active Open Agreement
      description: Disable the Open Agreement from being viewed or accepted.
      operationId: CloseOpenAgreement
      parameters:
        - name: open_agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: OA.1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseOpenAgreementResponse'
  /payments:
    post:
      tags:
        - Payments
      summary: Make a Payment

      operationId: MakeAPayment
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeAPaymentRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeAPaymentResponse'
    get:
      tags:
        - Payments
      summary: List all Payments
      description: ''
      operationId: ListAllPayments
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllPaymentsResponse'
  '/payments/{payment_ref}':
    get:
      tags:
        - Payments
      summary: Get a Payment
      description: Get a single payment by its reference
      operationId: GetAPayment
      parameters:
        - name: payment_ref
          in: path
          description: Payment reference
          required: true
          style: simple
          schema:
            type: string
          example: PB.1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAPaymentResponse'
  /payment_requests:
    post:
      tags:
        - Payment Requests
      summary: Request Payment
      description: ''
      operationId: MakeAPaymentRequest
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeAPaymentRequestRequest'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeAPaymentRequestResponse'
        '422':
          description: When a payment is requested from an Anyone Contact with no valid Agreement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeAPaymentRequestWithNoAgreementResponse'
  '/payment_requests/{payment_request_ref}':
    get:
      tags:
        - Payment Requests
      summary: Get a Payment Request
      description: ''
      operationId: GetAPaymentRequest
      parameters:
        - name: payment_request_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: PR.3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAPaymentRequestResponse'
    delete:
      tags:
        - Payment Requests
      summary: Cancel a Payment Request
      description: A Payment Request can be cancelled as long as the associated transaction's state is <strong>maturing</strong> or <strong>matured</strong>.
      operationId: CancelAPaymentRequest
      parameters:
        - name: payment_request_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: PR.3
      responses:
        '204':
          description: No Content
  /payment_requests/collections:
    get:
      tags:
        - Payment Requests
      summary: 'List Collections'
      description: Payment Requests where you are the creditor and are collecting funds from your debtor using traditional direct-debit.
      operationId: ListPaymentRequestCollections
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaymentRequestCollectionsResponse'
  '/credits/{credit_ref}/refunds':
    post:
      tags:
        - Refunds
      summary: Issue a Refund
      description: >
        Certain rules apply to the issuance of a refund:

        <ul>
          <li>Must be applied against a successfully cleared Payment Request (Collections or Receivables)</li>
          <li>Many refunds may be created against the original Payment Request</li>
          <li>The total refunded amount must not exceed the original value</li>
        </ul>
      operationId: IssueARefund
      parameters:
        - name: credit_ref
          in: path
          description: 'The credit reference number e.g C.625v'
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueARefundRequest'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueARefundResponse'
  /refunds/outgoing:
    get:
      tags:
        - Refunds
      summary: List Refunds
      description: ''
      operationId: ListOutgoingRefunds
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOutgoingRefundsResponse'
  '/refunds/{refund_ref}':
    get:
      tags:
        - Refunds
      summary: Retrieve a Refund
      description: Get a single Refund by its reference
      operationId: RetrieveARefund
      parameters:
        - name: refund_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: PRF.75f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveARefundResponse'
  /transactions:
    get:
      tags:
        - Transactions
      summary: List all transactions
      description: '<aside class="notice">By default, Zepto will search and return all transactions created in the <strong>last 30 days</strong>. You can adjust this up to <strong>1 year</strong> by defining the <code>min_created_date</code> query string parameter defined below.</aside>'
      operationId: ListAllTransactions
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
        - name: ref (debit or credit)
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: D.1i
        - name: parent_ref
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: PRF.92a
        - name: bank_ref
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: DT.12
        - name: both_parties
          in: query
          description: 'Single value, exact match. Will also list debits & credits applied to the other party'
          style: form
          schema:
            type: boolean
          example: true
        - name: status
          in: query
          description: 'Multiple values, exact match'
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            enum:
              - maturing
              - matured
              - preprocessing
              - processing
              - clearing
              - cleared
              - rejected
              - returned
              - voided
              - pending_verification
              - paused
          example:
            - maturing
        - name: category
          in: query
          description: 'Multiple values, exact match'
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            enum:
              - payout
              - payout_refund
              - invoice
          example:
            - payout
        - name: type
          in: query
          description: 'Multiple values, exact match'
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
            enum:
              - debit
              - credit
          example:
            - debit
        - name: other_party
          in: query
          description: 'Single value, string search. Cannot be combine with <code>both_parties</code> query string'
          style: form
          schema:
            type: string
          example: party people
        - name: other_party_bank_ref
          in: query
          description: 'Single value, exact match'
          style: form
          schema:
            type: string
          example: CT.3a
        - name: party_contact_id
          in: query
          description: 'Single value, exact match. Cannot be combine with <code>both_parties</code> query string'
          style: form
          schema:
            type: string
          example: a67036fc-217e-437a-83f4-89e90724bea0
        - name: description
          in: query
          description: 'Single value, string search'
          style: form
          schema:
            type: string
          example: some description
        - name: min_amount
          in: query
          description: 'Cents, single value, exact match'
          style: form
          schema:
            type: integer
          example: 500
        - name: max_amount
          in: query
          description: 'Cents, single value, exact match'
          style: form
          schema:
            type: integer
          example: 1000
        - name: min_created_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-05-10T00:00:00Z'
        - name: max_created_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-06-10T00:00:00Z'
        - name: min_matured_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-05-10T00:00:00Z'
        - name: max_matured_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-06-10T00:00:00Z'
        - name: min_cleared_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-05-10T00:00:00Z'
        - name: max_cleared_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-06-10T00:00:00Z'
        - name: min_status_changed_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-05-10T00:00:00Z'
        - name: max_status_changed_date
          in: query
          description: 'Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-06-10T00:00:00Z'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllTransactionsResponse'
  /unassigned_agreements:
    post:
      tags:
        - Unassigned Agreements
      summary: Propose an Unassigned Agreement
      description: >-
        Create an Unassigned Agreement.


        <aside class="notice">You can set any of the term metrics to
        <code>null</code> if you wish them to not have a limit.</aside>
      operationId: ProposeUnassignedAgreement
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProposeUnassignedAgreementRequest'
        required: true
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposeUnassignedAgreementResponse'
    get:
      tags:
        - Unassigned Agreements
      summary: List all Unassigned Agreements
      description: Will return all Unassigned Agreements that have not yet been accepted.
      operationId: GetUnassignedAgreements
      parameters:
        - name: page
          in: query
          description: 'Page of results to return, single value, exact match'
          style: form
          schema:
            type: string
          example: '1'
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          style: form
          schema:
            type: string
          example: '100'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUnassignedAgreementsResponse'
  '/unassigned_agreements/{unassigned_agreement_ref}':
    get:
      tags:
        - Unassigned Agreements
      summary: Get an Unassigned Agreement
      description: Get a single Unassigned Agreement by its reference.
      operationId: GetAgreement
      parameters:
        - name: unassigned_agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: A.4k
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUnassignedAgreementResponse'
    delete:
      tags:
        - Unassigned Agreements
      summary: Delete an Unassigned Agreement
      description: >-
        An Unassigned Agreement can be deleted at anytime as long as it has not
        yet been assigned an authoriser.
      operationId: DeleteUnassignedAgreement
      parameters:
        - name: unassigned_agreement_ref
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: A.2
      responses:
        '204':
          description: No Content
  /user:
    get:
      tags:
        - Users
      summary: Get user details
      description: ''
      operationId: GetUserDetails
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserDetailsResponse'
  /webhooks:
    get:
      tags:
        - Webhooks
      summary: List all webhooks
      description: "List all your application's webhook configurations."
      operationId: GetWebhooks
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllWebhooksResponse'
        '404':
          description: Not Found

  '/webhooks/{webhook_id}/deliveries':
    get:
      tags:
        - Webhooks
      summary: List deliveries for a webhook
      description: 'NOTE: Webhook deliveries are stored for 30 days.'
      operationId: GetWebhookDeliveries
      parameters:
        - name: webhook_id
          in: path
          description: 'Single value, exact match'
          required: true
          style: simple
          schema:
            type: string
          example: 31918dce-2dc3-405b-8d3c-fd3901b17e9f
        - name: ref
          in: query
          description: 'Filter deliveries by ref (`WebhookDelivery.data.ref`), single value, exact match'
          required: false
          style: simple
          schema:
            type: string
        - name: per_page
          in: query
          description: 'Number of results per page, single value, exact match'
          required: false
          style: simple
          schema:
            type: string
          example: 20
        - name: starting_after
          in: query
          description: 'Display all webhook deliveries after this webhook delivery offset UUID, single value, exact match'
          required: false
          style: simple
          schema:
            type: string
            format: uuid
          example: 31918dce-2dc3-405b-8d3c-fd3901b17e9f
        - name: event_type
          in: query
          description: 'See ([Data schemas](/#data-schemas)) for a list of possible values, single value, exact match'
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: ['See ([Data schemas](/#data-schemas))']
          example: 'agreement.accepted'
        - name: since
          in: query
          required: false
          description: 'Display all webhook deliveries after this date. Date/time UTC ISO 8601 format, single value, exact match'
          style: form
          schema:
            type: string
            format: date-time
          example: '2017-05-10T00:00:00Z'
        - name: response_status_code
          in: query
          description: 'Single value, exact match'
          required: false
          style: simple
          schema:
            type: string
            enum: [2xx, 4xx, 5xx]
          example: '418'
        - name: state
          in: query
          description: 'Filter deliveries by state, single value, exact match. See [Our delivery promise](#our-delivery-promises)'
          required: false
          style: simple
          schema:
            type: string
            enum: [pending, completed, retrying, failed]
          example: 'delivered'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebhookDeliveriesResponse'
        '404':
          description: Not Found
  '/webhook_deliveries/{id}':
    get:
      tags:
        - Webhooks
      summary: Get a Webhook Delivery
      description: Get a single webhook delivery by ID.
      operationId: GetAWebhookDelivery
      parameters:
        - name: id
          in: path
          description: WebhookDelivery ID (`WebhookDelivery.data.id`)
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: UUID
          example: 31918dce-2dc3-405b-8d3c-fd3901b17e9f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAWebhookDeliveryResponse'
        '404':
          description: Not Found
  '/webhook_deliveries/{id}/redeliver':
    post:
      tags:
        - Webhooks
      summary: Resend a Webhook Delivery
      description: >
        Use this endpoint to resend a failed webhook delivery.
      operationId: ResendAWebhookDelivery
      parameters:
        - name: id
          in: path
          description: WebhookDelivery ID (`WebhookDelivery.data.id`)
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: UUID
          example: 31918dce-2dc3-405b-8d3c-fd3901b17e9f
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedeliverAWebhookDeliveryResponse'
components:
  securitySchemes:
    bearerAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          refreshUrl: /oauth/token
          scopes:
            public: Access your public information
            contacts: Manage your contacts
            payments: Manage your payments
            payment_requests: Manage your payment requests
            refunds: Manage your refunds
            agreements: Manage your agreements
            transactions: Access your transaction history
            open_agreements: Manage your open agreements
            transfers: Manage your Transfers
  schemas:
    GetAgreementResponse:
      title: Get an Agreement (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - ref
            - initiator_id
            - authoriser_id
            - contact_id
            - bank_account_id
            - status
            - status_reason
            - responded_at
            - created_at
            - payout
            - terms
          properties:
            ref:
              type: string
              minLength: 3
              maxLenght: 18
              description: "The Agreement reference (Min: 3 - Max: 18)"
            initiator_id:
              type: string
              format: uuid
              description: Your Zepto account ID
            authoriser_id:
              type: string
              format: uuid
              description: The authoriser's account ID (AnyoneAccount)
            contact_id:
              type: string
              format: uuid
              description: The contact ID representing the authoriser within Zepto
            bank_account_id:
              type: string
              format: uuid
              description: The authoriser's bank account ID
            status:
              type: string
              description: The status of the Agreement
              enum:
                - proposed
                - accepted
                - cancelled
                - declined
                - expended
            status_reason:
              type: string
              description: The reason the agreement was cancelled. This is a free text field.
            responded_at:
              type: string
              format: date-time
              description: The date-time when the Agreement status changed
            created_at:
              type: string
              format: date-time
              description: The date-time when the Agreement was created
            terms:
              $ref: '#/components/schemas/Terms'
            metadata:
              type: object
              description: Your custom keyed data
      example:
        data:
          ref: A.2
          initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
          authoriser_id: 8df89c16-330f-462b-8891-808d7bdceb7f
          contact_id: 0d290763-bd5a-4b4d-a8ce-06c64c4a697b
          bank_account_id: fb9381ec-22af-47fd-8998-804f947aaca3
          status: approved
          status_reason: null
          responded_at: '2017-03-20T02:13:11Z'
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              max_amount: 10000
              min_amount: 1
            per_frequency:
              days: 7
              max_amount: 1000000
    ListOutgoingAgreementsResponse:
      title: List outgoing Agreements (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: A.4
            initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
            authoriser_id: 8df89c16-330f-462b-8891-808d7bdceb7f
            contact_id: a80ac411-c8fb-45c0-9557-607c54649907
            bank_account_id: fa80ac411-c8fb-45c0-9557-607c54649907
            status: proposed
            status_reason: null
            responded_at: null
            created_at: '2017-03-20T00:53:27Z'
            terms:
              per_payout:
                max_amount: 10000
                min_amount: 1
              per_frequency:
                days: 7
                max_amount: 1000000
          - ref: A.3
            initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
            authoriser_id: 56df206a-aaff-471a-b075-11882bc8906a
            contact_id: a80ac411-c8fb-45c0-9557-607c54649907
            bank_account_id: fa80ac411-c8fb-45c0-9557-607c54649907
            status: proposed
            status_reason: null
            responded_at: null
            created_at: '2017-03-16T22:51:48Z'
            terms:
              per_payout:
                max_amount: 5000
                min_amount: 0
              per_frequency:
                days: '1'
                max_amount: 10000
    ListAllBankAccountsResponse:
      title: List all Bank Accounts (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - id: 6a7ed958-f1e8-42dc-8c02-3901d7057357
            branch_code: '020100'
            bank_name: Bank of New Zealand
            account_number: '3993013'
            status: active
            title: NZ.020100.3993013'
            available_balance: null
          - id: 56df206a-aaff-471a-b075-11882bc8906a
            branch_code: '020120'
            bank_name: Bank of New Zealand
            account_number: '119302'
            status: active
            title: 'Trust Account'
            available_balance: null
          - id: ab3de19b-709b-4a41-82a5-3b43b3dc58c9
            branch_code: '802919'
            bank_name: Zepto Float Account
            account_number: '1748212'
            status: active
            title: 'Float Account'
            available_balance: 10000
            payid_configs:
              email_domain: pay.zepto.com.au
              pooling_state: disabled
              max_pool_size: 10
              current_pool_size: 1
    CreateOpenAgreementRequest:
      title: Create an Open Agreement (request)
      required:
        - title
        - terms
      type: object
      properties:
        title:
          type: string
          description: Title of the Open Agreement (Visible to authorisers)
          example: Subscription Plan A
        terms:
          $ref: '#/components/schemas/Terms'
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        title: Subscription Plan A
        terms:
          per_payout:
            min_amount: null
            max_amount: 10000
          per_frequency:
            days: 7
            max_amount: 1000000
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    Terms:
      title: Agreement terms
      required:
        - per_payout
        - per_frequency
      type: object
      description: Terms
      properties:
        per_payout:
          $ref: '#/components/schemas/PerPayout'
        per_frequency:
          $ref: '#/components/schemas/PerFrequency'
    PerPayout:
      title: Per payout terms
      required:
        - min_amount
        - max_amount
      type: object
      properties:
        min_amount:
          type: integer
          description: Minimum amount in cents a Payment Request can be in order to be auto-approved. Specify <code>null</code> for no limit.
          example: 0
        max_amount:
          type: integer
          description: Maximum amount in cents a Payment Request can be in order to be auto-approved. Specify <code>null</code> for no limit.
          example: 10000
    PerFrequency:
      title: Per frequency terms
      required:
        - days
        - max_amount
      type: object
      properties:
        days:
          type: integer
          description: Amount of days to apply against the frequency. Specify <code>null</code> for no limit.
          example: 7
        max_amount:
          type: integer
          description: >-
            Maximum amount in cents the total of all PRs can be for the duration
            of the frequency. Specify <code>null</code> for no limit.
          example: 1000000
    CreateOpenAgreementResponse:
      title: Create an Open Agreement (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: OA.1
          title: Subscription Plan A
          status: active
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              min_amount: null
              max_amount: 10000
            per_frequency:
              days: 7
              max_amount: 1000000
          link: >-
            https://go.nz.sandbox.zepto.money/open_agreements/aecff76d-13e0-4e17-b7c5-844ae07fa675/agreements/invitation
    ListAllOpenAgreementsResponse:
      title: List all Open Agreements (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: OA.1
            title: Subscription Plan A
            status: active
            created_at: '2017-03-20T00:53:27Z'
            terms:
              per_payout:
                max_amount: 10000
                min_amount: null
              per_frequency:
                days: 7
                max_amount: 1000000
            link: >-
              https://go.nz.sandbox.zepto.money/open_agreements/2e002c0b-ffaf-44eb-a35c-15fa384ddde1/agreements/invitation
          - ref: OA.2
            title: Subscription Plan B
            status: closed
            created_at: '2017-03-20T00:53:27Z'
            terms:
              per_payout:
                max_amount: 10000
                min_amount: null
              per_frequency:
                days: null
                max_amount: null
            link: >-
              https://go.nz.sandbox.zepto.money/open_agreements/948e3662-154d-42d1-bdc9-a05c251d3981/agreements/invitation
    ActivateOpenAgreementResponse:
      title: Activate Open Agreement Request (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: OA.1
          title: Subscription Plan A
          status: active
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              max_amount: 10000
              min_amount: null
            per_frequency:
              days: 7
              max_amount: 1000000
          link: >-
            https://go.nz.sandbox.zepto.money/open_agreements/2e002c0b-ffaf-44eb-a35c-15fa384ddde1/agreements/invitation
    CloseOpenAgreementResponse:
      title: Close Open Agreement Request (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: OA.1
          title: Subscription Plan A
          status: closed
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              max_amount: 10000
              min_amount: null
            per_frequency:
              days: 7
              max_amount: 1000000
          link: >-
            https://go.nz.sandbox.zepto.money/open_agreements/2e002c0b-ffaf-44eb-a35c-15fa384ddde1/agreements/invitation
    ListAllContactsResponse:
      title: List all Contacts (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - id: 6a7ed958-f1e8-42dc-8c02-3901d7057357
            name: Outstanding Tours Pty Ltd
            email: accounts@outstandingtours.com.au
            type: Zepto account
            bank_account:
              id: 095c5ab7-7fa8-40fd-b317-cddbbf4c8fbc
              account_number: '494307'
              branch_code: '020040'
              bank_name: Bank of New Zealand
              state: active
              iav_provider: split
              iav_status: active
              blocks:
                debits_blocked: false
                credits_blocked: false
            bank_connection:
              id: c397645b-bd4f-4fc6-b1fe-4993fef6c3c7
          - id: 49935c67-c5df-4f00-99f4-1413c18a89a0
            name: Adventure Dudes Pty Ltd
            email: accounts@adventuredudes.com.au
            type: Zepto account
            bank_account:
              id: 861ff8e4-7acf-4897-9e53-e7c5ae5f7cc0
              account_number: '4395959'
              branch_code: 020018
              bank_name: Bank of New Zealand
              state: active
              iav_provider: split
              iav_status: credentials_invalid
              blocks:
                debits_blocked: false
                credits_blocked: false
            bank_connection:
              id: c397645b-bd4f-4fc6-b1fe-4993fef6c3c7
          - id: eb3266f9-e172-4b6c-b802-fe5ac4d3250a
            name: Surfing World Pty Ltd
            email: accounts@surfingworld.com.au
            type: Zepto account
            bank_account:
              id: null
              account_number: null
              branch_code: null
              bank_name: null
              state: disabled
              iav_provider: null
              iav_status: null
              blocks:
                debits_blocked: false
                credits_blocked: false
            links:
              add_bank_connection: https://go.nz.sandbox.zepto.money/invite_contact/thomas-morgan-1/1030bfef-cef5-4938-b10b-5841cafafc80
          - id: 6a7ed958-f1e8-42dc-8c02-3901d7057357
            name: Hunter Thompson
            email: hunter@batcountry.com
            type: anyone
            bank_account:
              id: 55afddde-4296-4daf-8e49-7ba481ef9608
              account_number: '13048322'
              branch_code: '020136'
              bank_name: Bank of New Zealand
              state: pending_verification
              iav_provider: null
              iav_status: null
              blocks:
                debits_blocked: false
                credits_blocked: false
            links:
              add_bank_connection: https://go.nz.sandbox.zepto.money/invite_contact/thomas-morgan-1/1030bfef-cef5-4938-b10b-5841cafafc80
    AddAnAnyoneContactRequest:
      title: Add a Contact (request)
      required:
        - name
        - email
        - branch_code
        - account_number
      type: object
      properties:
        name:
          type: string
          description: The name of the Contact (140 max. characters)
        email:
          type: string
          description: The email of the Contact (256 max. characters)
        branch_code:
          type: string
          description: The bank account BSB of the Contact
        account_number:
          type: string
          description: The bank account number of the Contact
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        name: Hunter Thompson
        email: hunter@batcountry.com
        branch_code: '020136'
        account_number: '13048322'
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    AddAnAnyoneContactResponse:
      title: Add a Contact (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          id: 6a7ed958-f1e8-42dc-8c02-3901d7057357
          name: Hunter Thompson
          email: hunter@batcountry.com
          type: anyone
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
          bank_account:
            id: 55afddde-4296-4daf-8e49-7ba481ef9608
            account_number: '13048322'
            branch_code: '020136'
            bank_name: Bank of New Zealand
            state: active
            iav_provider: null
            iav_status: null
            blocks:
              debits_blocked: false
              credits_blocked: false
          links:
            add_bank_connection: https://go.nz.sandbox.zepto.money/invite_contact/thomas-morgan-1/1030bfef-cef5-4938-b10b-5841cafafc80
    GetABankConnectionResponse:
      title: Get a BankConnection (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          id: c397645b-bd4f-4fc6-b1fe-4993fef6c3c7
          provider_name: split
          state: credentials_invalid
          refreshed_at: '2020-02-13T09:01:00Z'
          removed_at:
          failure_reason:
          institution:
            short_name: ASB
            full_name: Auckland Savings Bank
          contact:
            id: 72e37667-6364-440f-b1bd-56df5654e258
            name: Joel Boyle
            email: travis@hermanntorp.net
          links:
            update_bank_connection: https://go.nz.sandbox.zepto.money/authorise_bank_connections/thomas-morgan-1/c397645b-bd4f-4fc6-b1fe-4993fef6c3c7
    GetAContactResponse:
      title: Get a Contact (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - id
            - ref
            - name
            - email
            - type
            - metadata
            - bank_account
            - anyone_account
          properties:
            id:
              type: string
              format: uuid
              description: The Contact ID
            ref:
              type: string
              format: string
              description: The Contact ref
            name:
              type: string
              min: 3
              max: 140
              description: 'The Contact name (Min: 3 - Max: 140)'
            email:
              type: string
              min: 6
              max: 256
              format: email
              description: 'The Contact email (Min: 6 - Max: 256)'
            'type':
              type: string
              description: (Deprecated) The Contact account type
              enum:
                - Zepto account
                - anyone
            metadata:
              $ref: '#/components/schemas/Metadata'
            bank_account:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The Bank Account ID
                account_number:
                  type: string
                  min: 5
                  max: 9
                  description: 'The Bank Account number (Min: 5 - Max: 9)'
                branch_code:
                  type: string
                  min: 6
                  max: 6
                  description: 'The BSB number (Min: 6 - Max: 6)'
                state:
                  type: string
                  description: The bank account state
                  enum:
                    - active
                    - removed
                iav_provider:
                  type: string
                  description: The instant account verification provider
                  enum:
                    - split
                    - proviso
                    - basiq
                    - credit_sense
                iav_status:
                  type: string
                  description: The instant account verification bank connection status
                  enum:
                    - active
                    - removed
                    - credentials_invalid
                blocks:
                  type: object
                  properties:
                    debits_blocked:
                      type: boolean
                      description: Used by Zepto admins. Defines whether the bank account is blocked from being debited
                    credits_blocked:
                      type: boolean
                      description: Used by Zepto admins. Defined Whether this bank account is blocked from being credited
            anyone_account:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: (Deprecated) The Anyone Account ID
            bank_connection:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  description: The bank connection ID
            links:
              type: object
              properties:
                add_bank_connection:
                  type: string
                  format: url
                  description: A unique URL to share with the Contact in order to establish a new bank connection to their bank account
            payid_details:
              type: object
              properties:
                alias_value:
                  type: string
                  format: email
                  min: 6
                  max: 256
                  description: The PayID email
                alias_type:
                  type: string
                  description: Type of PayID. Fixed to `email`
                alias_name:
                  type: string
                  min: 3
                  max: 140
                  description: Your merchant's alias_name
                state:
                  type: string
                  description: Pending -> Active or Failed -> Deregistered (Contact removed)
                  enum:
                    - pending
                    - active
                    - failed
                    - deregistered
      example:
        data:
          id: 55afddde-4296-4daf-8e49-7ba481ef9608
          ref: CNT.123
          name: Outstanding Tours Pty Ltd
          email: accounts@outstandingtours.com.au
          type: anyone
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
          bank_account:
            id: fcabeacb-2ef6-4b27-ba19-4f6fa0d57dcb
            account_number: '947434694'
            branch_code: '020159'
            bank_name: Bank of New Zealand
            state: active
            iav_provider: null
            iav_status: null
            blocks:
              debits_blocked: false
              credits_blocked: false
          anyone_account:
            id: 31a05f81-25a2-4085-92ef-0d16d0263bff
          bank_connection:
            id: null
          links:
            add_bank_connection: https://go.nz.sandbox.zepto.money/invite_contact/thomas-morgan-1/1030bfef-cef5-4938-b10b-5841cafafc80
          payid_details:
            alias_value: otp@pay.travel.com.au
            alias_type: email
            alias_name: your merchant's alias_name
            state: active
    UpdateAContactRequest:
      title: Update a Contact (request)
      type: object
      properties:
        name:
          type: string
          description: The name of the Contact
        email:
          type: string
          description: The email of the Contact
        branch_code:
          type: string
          description: The bank account BSB of the Contact
        account_number:
          type: string
          description: The bank account number of the Contact
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        name: My very own alias
        email: updated@email.com
        branch_code: '123456'
        account_number: '99887766'
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    UpdateAContactResponse:
      title: Update a Contact (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          id: fcabeacb-2ef6-4b27-ba19-4f6fa0d57dcb
          name: My very own alias
          email: updated@email.com
          type: anyone
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
          bank_account:
            id: 55afddde-4296-4daf-8e49-7ba481ef9608
            account_number: '99887766'
            branch_code: '123456'
            bank_name: Zepto SANDBOX Bank
            state: active
            iav_provider: null
            iav_status: null
            blocks:
              debits_blocked: false
              credits_blocked: false
          anyone_account:
            id: 63232c0a-a783-4ae9-ae73-f0974fe1e345
          links:
            add_bank_connection: http://go.nz.sandbox.zepto.money/invite_contact/dog-bones-inc/fcabeacb-2ef6-4b27-ba19-4f6fa0d57dcb
    MakeAPaymentRequest:
      title: Make a Payment (request)
      required:
        - description
        - matures_at
        - payouts
        - your_bank_account_id
      type: object
      properties:
        description:
          type: string
          description: User description. Only visible to the payer
          example: The SuperPackage
        matures_at:
          type: string
          format: date-time
          description: Date & time in UTC ISO8601 the Payment should be processed. (Can not be earlier than the start of current day in NZST)
          example: '9/13/2016 12:00:00 AM'
        your_bank_account_id:
          type: string
          description: Specify where we should take the funds for this transaction. If omitted, your primary bank account will be used.
          style: form
          schema:
            type: string
          example: 83623359-e86e-440c-9780-432a3bc3626f
        payouts:
          type: array
          items:
            $ref: '#/components/schemas/Payout'
          description: One Payout object only
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        description: The SuperPackage
        matures_at: '2021-06-13T00:00:00Z'
        your_bank_account_id: 83623359-e86e-440c-9780-432a3bc3626f
        payouts:
          - amount: 30000
            description: A tandem skydive jump SB23094
            recipient_contact_id: 48b89364-1577-4c81-ba02-96705895d457
            metadata:
              invoice_ref: BILL-0001
              invoice_id: c80a9958-e805-47c0-ac2a-c947d7fd778d
              custom_key: Custom string
              another_custom_key: Maybe a URL
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    Payout:
      title: Payout
      required:
        - amount
        - description
        - recipient_contact_id
      description: The actual Payout
      type: object
      properties:
        amount:
          type: integer
          description: Amount in cents to pay the recipient
          example: 30000
        description:
          type: string
          description: Description that both the payer and recipient can see. For Direct Entry payments, the payout recipient will see the first 9 characters of this description.
          example: A tandem skydive jump SB23094
        recipient_contact_id:
          type: string
          description: Contact to pay (`Contact.data.id`)
          example: 48b89364-1577-4c81-ba02-96705895d457
        metadata:
          type: Metadata
          description: Use for your custom data and certain Zepto customisations. Stored against generated transactions and included in associated webhook payloads.
    VoidAPayoutRequest:
      title: Void a Payout (request)
      type: object
      properties:
        details:
          type: string
          description: Optional details about why the payout has been voided
          example: Incorrect recipient
    Metadata:
      title: Metadata
      type: object
      description: Use for your custom data and certain Zepto customisations.
      properties: {}
      example:
        custom_key: Custom string
        another_custom_key: Maybe a URL
    MakeAPaymentResponse:
      title: Make a Payment (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: PB.1
          your_bank_account_id: 83623359-e86e-440c-9780-432a3bc3626f
          payouts:
            - ref: D.1
              recipient_contact_id: 48b89364-1577-4c81-ba02-96705895d457
              batch_description: The SuperPackage
              matures_at: '2016-09-13T23:50:44Z'
              created_at: '2016-09-10T23:50:44Z'
              status: maturing
              amount: 30000
              description: A tandem skydive jump SB23094
              from_id: 83623359-e86e-440c-9780-432a3bc3626f
              to_id: 21066764-c103-4e7f-b436-4cee7db5f400
              metadata:
                invoice_ref: BILL-0001
                invoice_id: c80a9958-e805-47c0-ac2a-c947d7fd778d
                custom_key: Custom string
                another_custom_key: Maybe a URL
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    ListAllPaymentsResponse:
      title: List all Payments (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: PB.1
            your_bank_account_id: 83623359-e86e-440c-9780-432a3bc3626f
            payouts:
              - ref: D.1
                recipient_contact_id: 48b89364-1577-4c81-ba02-96705895d457
                batch_description: This description is only available to the payer
                matures_at: '2016-09-13T23:50:44Z'
                created_at: '2016-09-10T23:50:44Z'
                status: maturing
                amount: 30000
                description: The recipient will see this description
                from_id: 83623359-e86e-440c-9780-432a3bc3626f
                to_id: 21066764-c103-4e7f-b436-4cee7db5f400
                metadata:
                  invoice_ref: BILL-0001
                  invoice_id: c80a9958-e805-47c0-ac2a-c947d7fd778d
                  custom_key: Custom string
                  another_custom_key: Maybe a URL
              - ref: D.2
                recipient_contact_id: dc6f1e60-3803-43ca-a200-7d641816f57f
                batch_description: This description is only available to the payer
                matures_at: '2016-09-13T23:50:44Z'
                created_at: '2016-09-10T23:50:44Z'
                status: maturing
                amount: 30000
                description: The recipient will see this description
                from_id: 48b89364-1577-4c81-ba02-96705895d457
                to_id: f989d9cd-87fc-4c73-b0a4-1eb0e8768d3b
            metadata:
              custom_key: Custom string
              another_custom_key: Maybe a URL
    GetAPaymentResponse:
      title: Get a Payment (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: PB.1
          your_bank_account_id: 83623359-e86e-440c-9780-432a3bc3626f
          payouts:
            - ref: D.1
              recipient_contact_id: 48b89364-1577-4c81-ba02-96705895d457
              batch_description: The SuperPackage
              matures_at: '2016-09-13T23:50:44Z'
              created_at: '2016-09-10T23:50:44'
              status: maturing
              amount: 30000
              description: A tandem skydive jump SB23094
              from_id: 83623359-e86e-440c-9780-432a3bc3626f
              to_id: 21066764-c103-4e7f-b436-4cee7db5f400
              metadata:
                invoice_ref: BILL-0001
                invoice_id: c80a9958-e805-47c0-ac2a-c947d7fd778d
                custom_key: Custom string
                another_custom_key: Maybe a URL
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    MakeAPaymentRequestRequest:
      title: Make a Payment Request (request)
      required:
        - authoriser_contact_id
        - description
        - matures_at
        - amount
      type: object
      properties:
        description:
          type: string
          description: Description visible to the initiator (payee). The first 9 characters supplied will be visible to the authoriser (payer)
          example: Visible to both initiator and authoriser
        matures_at:
          type: string
          format: date-time
          description: >-
            Date & time in UTC ISO8601 that the Payment will be processed if the request is approved. (If the request is approved after this point in time, it will be processed straight away)
          example: '2016-12-19T02:10:56Z'
        amount:
          type: integer
          min: 1
          max: 99999999999
          description: 'Amount in cents to pay the initiator (Min: 1 - Max: 99999999999)'
          example: 99000
        authoriser_contact_id:
          type: string
          description: The Contact the payment will be requested from (`Contact.data.id`)
          example: de86472c-c027-4735-a6a7-234366a27fc7
        your_bank_account_id:
          type: string
          format: uuid
          description: Specify where we should settle the funds for this transaction. If omitted, your primary bank account will be used.
          style: form
          schema:
            type: string
          example: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
        metadata:
          type: object
          description: Use for your custom data and certain Zepto customisations. Stored against generated transactions and included in associated webhook payloads.
      example:
        description: Visible to both initiator and authoriser
        matures_at: 2016-12-19T02:10:56Z
        amount: 99000
        authoriser_contact_id: de86472c-c027-4735-a6a7-234366a27fc7
        your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    MakeAPaymentRequestResponse:
      title: Make a Payment Request (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - ref
            - initiator_id
            - your_bank_account_id
            - authoriser_id
            - authoriser_contact_id
            - contact_initiated
            - schedule_ref
            - status
            - status_reason
            - matures_at
            - responded_at
            - created_at
            - credit_ref
            - payout
          properties:
            ref:
              type: string
              description: 'The Payment Request reference (PR.*) (Min: 4 - Max: 8)'
            initiator_id:
              type: string
              format: uuid
              description: 'Your bank account ID where the funds will settle (Min: 36 - Max: 36)'
            your_bank_account_id:
              type: string
              format: uuid
              description: 'Your bank account ID where the funds will settle (alias of `initiator_id`) (Min: 36 - Max: 36)'
            authoriser_id:
              type: string
              format: uuid
              description: "The debtor's bank account ID (Min: 36 - Max: 36)"
            authoriser_contact_id:
              type: string
              format: uuid
              description: 'The contact ID representing the debtor within Zepto (Min: 36 - Max: 36)'
            contact_initiated:
              type: boolean
              description: Initiated by Contact or Merchant
            schedule_ref:
              type: string
              description: 'The schedule that generated the Payment request if applicable (Min: 0 - Max: 8)'
            status:
              type: string
              description: The status of the Payment Request
              enum:
                - pending_approval
                - unverified
                - approved
                - declined
                - cancelled
            status_reason:
              type: string
              description: 'Only used when the `status` is `declined` due to prechecking. (Min: 0 - Max: 280)'
              enum:
                - The balance of the nominated bank account for this Payment Request is not available.
                - The nominated bank account for this Payment Request has insufficient funds.
            matures_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request is up for processing (Min: 20 - Max: 20)'
            responded_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request status changed (Min: 0 - Max: 20)'
            created_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request was created (Min: 20 - Max: 20)'
            credit_ref:
              type: string
              description: 'The resulting credit entry reference (available once approved) (Min: 4 - Max: 8)'
            payout:
              type: object
              properties:
                amount:
                  type: integer
                  min: 1
                  max: 99999999999
                  description: 'Amount in cents (Min: 1 - Max: 99999999999)'
                'description':
                  type: string
                  description: 'Payment Request description (Min: 1 - Max: 280)'
                matures_at:
                  type: string
                  format: date-time
                  description: 'The date-time when the Payment Request is up for processing (Min: 20 - Max: 20)'
              required:
                - amount
                - description
                - matures_at
            metadata:
              type: object
              description: Your custom keyed data
      example:
        data:
          ref: PR.39p1
          initiator_id: ca7bc5b3-e47f-4153-96fb-bbe326b42772
          your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
          authoriser_id: 970e4526-67d9-4ed9-b554-f5cf390ab775
          authoriser_contact_id: de86472c-c027-4735-a6a7-234366a27fc7
          contact_initiated: false
          schedule_ref: null
          status: pending_approval
          status_reason: null
          matures_at: '2021-12-25T00:00:00Z'
          responded_at: null
          created_at: '2021-12-19T02:10:56Z'
          credit_ref: null
          payout:
            amount: 99000
            description: Premium Package for 4
            matures_at: '2021-12-25T00:00:00Z'
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    MakeAPaymentRequestWithNoAgreementResponse:
      title: Make a Payment Request to an Anyone Contact with no valid Agreement (response)
      required:
        - errors
      type: object
      properties:
        errors:
          type: string
      example:
        errors: Authoriser contact (de86472c-c027-4735-a6a7-234366a27fc7) is not a Zepto account holder and therefore must have a valid agreement in place before a Payment Request can be issued.
    GetAPaymentRequestResponse:
      title: Get a Payment Request (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - ref
            - initiator_id
            - your_bank_account_id
            - authoriser_id
            - authoriser_contact_id
            - schedule_ref
            - status
            - status_reason
            - matures_at
            - responded_at
            - created_at
            - payout
          properties:
            ref:
              type: string
              description: 'The Payment Request reference (PR.*) (Min: 4 - Max: 8)'
            initiator_id:
              type: string
              format: uuid
              description: 'Your bank account ID where the funds will settle (Min: 36 - Max: 36)'
            your_bank_account_id:
              type: string
              format: uuid
              description: 'Your bank account ID where the funds will settle (alias of `initiator_id`) (Min: 36 - Max: 36)'
            authoriser_id:
              type: string
              format: uuid
              description: "The debtor's bank account ID (Min: 36 - Max: 36)"
            authoriser_contact_id:
              type: string
              format: uuid
              description: 'The contact ID representing the debtor within Zepto (Min: 36 - Max: 36)'
            schedule_ref:
              type: string
              description: 'The schedule that generated the Payment request if applicable (Min: 0 - Max: 8)'
            status:
              type: string
              description: The status of the Payment Request
              enum:
                - pending_approval
                - unverified
                - approved
                - declined
                - cancelled
            status_reason:
              type: string
              description: 'Only used when the `status` is `declined` due to prechecking. (Min: 0 - Max: 280)'
              enum:
                - The balance of the nominated bank account for this Payment Request is not available.
                - The nominated bank account for this Payment Request has insufficient funds.
            matures_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request is up for processing (Min: 20 - Max: 20)'
            responded_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request status changed (Min: 0 - Max: 20)'
            created_at:
              type: string
              format: date-time
              description: 'The date-time when the Payment Request was created (Min: 20 - Max: 20)'
            credit_ref:
              type: string
              description: 'The resulting credit entry reference (available once approved) (Min: 4 - Max: 8)'
            payout:
              type: object
              properties:
                amount:
                  type: integer
                  min: 1
                  max: 99999999999
                  description: 'Amount in cents (Min: 1 - Max: 99999999999)'
                'description':
                  type: string
                  description: 'Payment Request description (Min: 1 - Max: 280)'
                matures_at:
                  type: string
                  format: date-time
                  description: 'The date-time when the Payment Request is up for processing (Min: 20 - Max: 20)'
              required:
                - amount
                - description
                - matures_at
            metadata:
              type: object
              description: Your custom keyed data
      example:
        data:
          ref: PR.88me
          initiator_id: ca7bc5b3-e47f-4153-96fb-bbe326b42772
          your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
          authoriser_id: 970e4526-67d9-4ed9-b554-f5cf390ab775
          authoriser_contact_id: de86472c-c027-4735-a6a7-234366a27fc7
          contact_initiated: false
          schedule_ref: null
          status: approved
          status_reason: null
          matures_at: '2021-11-25T00:00:00Z'
          responded_at: '2021-11-19T02:38:04Z'
          created_at: '2021-11-19T02:10:56Z'
          credit_ref: C.b6tf
          payout:
            amount: 1200
            description: Xbox Live subscription
            matures_at: '2021-11-25T00:00:00Z'
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    ListPaymentRequestCollectionsResponse:
      title: 'List Collections (response)'
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            required:
              - ref
              - initiator_id
              - your_bank_account_id
              - authoriser_id
              - authoriser_contact_id
              - contact_initiated
              - schedule_ref
              - status
              - status_reason
              - matures_at
              - responded_at
              - created_at
              - credit_ref
              - payout
            properties:
              ref:
                type: string
                description: The Payment Reference reference (PR.*)
              initiator_id:
                type: string
                format: uuid
                description: Your bank account ID where the funds will settle
              your_bank_account_id:
                type: string
                format: uuid
                description: Your bank account ID where the funds will settle (alias of `initiator_id`)
              authoriser_id:
                type: string
                format: uuid
                description: The debtor's bank account ID
              authoriser_contact_id:
                type: string
                format: uuid
                description: The contact ID representing the debtor within Zepto
              contact_initiated:
                type: boolean
                description: Initiated by Contact or Merchant
              schedule_ref:
                type: string
                description: The schedule that generated the Payment request if applicable
              status:
                type: string
                description: The status of the Payment Request
                enum:
                  - pending_approval
                  - unverified
                  - approved
                  - declined
                  - cancelled
              status_reason:
                type: string
                description: Only used when the `status` is `declined` due to prechecking.
                enum:
                  - The balance of the nominated bank account for this Payment Request is not available.
                  - The nominated bank account for this Payment Request has insufficient funds.
              matures_at:
                type: string
                format: date-time
                description: The date-time when the Payment Request is up for processing
              responded_at:
                type: string
                format: date-time
                description: The date-time when the Payment Request status changed
              created_at:
                type: string
                format: date-time
                description: The date-time when the Payment Request was created
              credit_ref:
                type: string
                description: The resulting credit entry reference (available once approved)
              payout:
                type: object
                properties:
                  amount:
                    type: integer
                    min: 1
                    max: 99999999999
                    description: 'Amount in cents (Min: 1 - Max: 99999999999)'
                  'description':
                    type: string
                    description: Payment Request description
                  matures_at:
                    type: string
                    format: date-time
                    description: The date-time when the Payment Request is up for processing
                required:
                  - amount
                  - description
                  - matures_at
              metadata:
                type: array
                description: Your custom keyed data
                items:
                  type: object
      example:
        data:
          - ref: PR.84t6
            initiator_id: ca7bc5b3-e47f-4153-96fb-bbe326b42772
            your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
            authoriser_id: de86472c-c027-4735-a6a7-234366a27fc7
            authoriser_contact_id: fb6a9252-3818-44dc-b5aa-2195391a746f
            contact_initiated: false
            schedule_ref: PRS.89t3
            status: approved
            status_reason: null
            matures_at: '2021-07-18T02:10:00Z'
            responded_at: '2021-07-18T02:10:00Z'
            created_at: '2021-07-18T02:10:00Z'
            credit_ref: C.6gr7
            payout:
              amount: 4999
              description: Subscription Payment
              matures_at: '2021-07-18T02:10:00Z'
          - ref: PR.45h7
            initiator_id: ca7bc5b3-e47f-4153-96fb-bbe326b42772
            your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
            authoriser_id: de86472c-c027-4735-a6a7-234366a27fc7
            authoriser_contact_id: fb6a9252-3818-44dc-b5aa-2195391a746f
            contact_initiated: false
            schedule_ref: null
            status: pending_approval
            status_reason: null
            matures_at: '2021-03-09T16:58:00Z'
            responded_at: null
            created_at: '2021-03-09T16:58:00Z'
            credit_ref: null
            payout:
              amount: 3000
              description: Membership fees
              matures_at: '2021-03-09T16:58:00Z'
    IssueARefundRequest:
      title: Issue a Refund (request)
      required:
        - amount
      type: object
      properties:
        amount:
          type: integer
          min: 1
          max: 99999999999
          description: 'Amount in cents refund (Min: 1 - Max: 99999999999)'
          example: 500
        reason:
          type: string
          description: Reason for the refund. First 9 characters are visible to both parties.
          example: Because reason
        your_bank_account_id:
          type: string
          format: uuid
          description: Specify where we should take the funds for this transaction. If omitted, your primary bank account will be used.
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        amount: 500
        reason: Because reason
        your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    IssueARefundResponse:
      title: Issue a Refund (response)
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - ref
            - for_ref
            - debit_ref
            - your_bank_account_id
            - created_at
            - amount
            - reason
          properties:
            ref:
              type: string
              format: uuid
              description: 'The Refund request reference (PRF.*) (Min: 5 - Max: 9)'
            for_ref:
              type: string
              description: 'The associated credit reference (C.*)'
            debit_ref:
              type: string
              description: 'The associated debit reference (C.*)'
            your_bank_account_id:
              type: string
              description: 'The source bank/float account (UUID)'
            created_at:
              type: string
              format: date-time
              description: The date-time when the Payment Request was created
              example: '2021-06-01T08:30:12Z'
            amount:
              type: integer
              description: 'The amount value provided (Min: 1 - Max: 99999999999)'
            channels:
              type: array
              description: The requested payment channel(s) to be used, in order. (direct_entry)
            reason:
              type: string
              description: Reason for the refund
      example:
        data:
          ref: PRF.7f4
          for_ref: C.1gf22
          debit_ref: D.63hgf
          your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
          created_at: '2021-06-01T07:20:24Z'
          amount: 500
          reason: Subscription refund
          contacts:
            source_contact_id: 194b0237-6c2c-4705-b4fb-308274b14eda
            target_contact_id: 3694ff53-32ea-40ae-8392-821e48d7bd5a
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    ListOutgoingRefundsResponse:
      title: List outgoing Refunds (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: PRF.2
            for_ref: C.5
            debit_ref: D.5a
            your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
            created_at: '2017-05-09T04:45:26Z'
            amount: 5
            reason: Because reason
            metadata:
              custom_key: Custom string
              another_custom_key: Maybe a URL
    RetrieveARefundResponse:
      title: Retrieve a Refund (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: PRF.1
          for_ref: C.59
          debit_ref: D.hi
          your_bank_account_id: 9c70871d-8e36-4c3e-8a9c-c0ee20e7c679
          created_at: '2017-05-08T07:20:24Z'
          amount: 500
          reason: Because reason
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    RetryPayoutResponse:
      title: Retry a payout (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          ref: C.2
          parent_ref: PR.039a
          type: credit
          category: payout
          created_at: '2016-12-05T23:15:00Z'
          matures_at: '2016-12-06T23:15:00Z'
          cleared_at: null
          bank_ref: null
          status: maturing
          status_changed_at: '2016-12-05T23:15:00Z'
          party_contact_id: 33c6e31d3-1dc1-448b-9512-0320bc44fdcf
          party_name: Price and Sons
          party_nickname: price-and-sons-2
          party_bank_ref: null
          description: Money for jam
          amount: 1
    ListAllTransactionsResponse:
      title: List all transactions (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: D.3
            parent_ref: null
            type: debit
            category: payout_refund
            created_at: '2021-04-07T23:15:00Z'
            matures_at: '2021-04-07T23:15:00Z'
            cleared_at: '2021-04-10T23:15:00Z'
            bank_ref: DT.9a
            status: cleared
            status_changed_at: '2021-04-10T23:15:00Z'
            party_contact_id: 31354923-b1e9-4d65-b03c-415ead89cbf3
            party_name: Sanford-Rees
            party_nickname: null
            party_bank_ref: CT.11
            description: null
            amount: 20000
            bank_account_id: '56df206a-aaff-471a-b075-11882bc8906a'
            channels: [float account]
            current_channel: "float account"
          - ref: D.2
            parent_ref: PB.2
            type: debit
            category: payout
            created_at: '2016-12-06T23:15:00Z'
            matures_at: '2016-12-09T23:15:00Z'
            cleared_at: null
            bank_ref: null
            status: maturing
            status_changed_at: '2016-12-06T23:15:00Z'
            party_contact_id: 3c6e31d3-1dc1-448b-9512-0320bc44fdcf
            party_name: Gutmann-Schmidt
            party_nickname: null
            party_bank_ref: null
            description: Batteries for hire
            amount: 2949299
            bank_account_id: '56df206a-aaff-471a-b075-11882bc8906a'
            channels: [float_account]
            current_channel: float_account
          - ref: C.2
            parent_ref: PB.s0z
            type: credit
            category: payout
            created_at: '2016-12-05T23:15:00Z'
            matures_at: '2016-12-06T23:15:00Z'
            cleared_at: '2016-12-09T23:15:00Z'
            bank_ref: CT.1
            status: cleared
            status_changed_at: '2016-12-09T23:15:00Z'
            party_contact_id: 33c6e31d3-1dc1-448b-9512-0320bc44fdcf
            party_name: Price and Sons
            party_nickname: price-and-sons-2
            party_bank_ref: null
            description: Online purchase
            amount: 19999
            bank_account_id: 'c2e329ae-606f-4311-a9ab-a751baa1915c'
            channels: [direct_entry]
            current_channel: direct_entry
            metadata:
              customer_id: xur4492
              product_ref: TSXL392110x
    ProposeUnassignedAgreementRequest:
      title: Propose an Unassigned Agreement (request)
      required:
        - expiry_in_seconds
        - terms
      type: object
      properties:
        expiry_in_seconds:
          type: integer
          description: >
            The amount of time in seconds before the Unassigned Agreement can no
            longer be accepted.
          example: 60
        single_use:
          type: boolean
          description: >
            Optionally propose a single use agreement. When the Unassigned Agreement is accepted and a Payment Request is approved according to the Agreement terms, the agreement will automatically become <code>expended</code>.<br><br>The proposed agreement must have equal max/min <code>per_payout</code> amounts and <code>null</code> <code>per_frequency</code> amounts.<br><br>Furthermore, we will automatically check that the authoriser's bank account has sufficient funds to honour the agreement terms.
          example: false
        terms:
          $ref: '#/components/schemas/Terms'
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        expiry_in_seconds: 60
        single_use: false
        terms:
          per_payout:
            min_amount: null
            max_amount: 10000
          per_frequency:
            days: 7
            max_amount: 1000000
        metadata:
          custom_key: Custom string
          another_custom_key: Maybe a URL
    ProposeUnassignedAgreementResponse:
      title: Propose an Unassigned Agreement (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: A.4k
          initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
          status: proposed
          responded_at: null
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              max_amount: 10000
              min_amount: null
            per_frequency:
              days: 7
              max_amount: 1000000
          assignment_expires_at: '2017-03-20T00:54:27Z'
          link: >-
            https://go.nz.sandbox.zepto.money/unassigned_agreements/b61fc159-8779-4a17-a826-e398e3e7e211/invitation
          metadata:
            custom_key: Custom string
            another_custom_key: Maybe a URL
    ListUnassignedAgreementsResponse:
      title: List Unassigned Agreements (response)
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            type: object
          description: ''
      example:
        data:
          - ref: A.4k
            initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
            status: proposed
            responded_at: null
            created_at: '2017-03-20T00:53:27Z'
            terms:
              per_payout:
                max_amount: 10000
                min_amount: null
              per_frequency:
                days: 7
                max_amount: 1000000
            assignment_expires_at: '2017-03-20T00:54:27Z'
            link: >-
              https://go.nz.sandbox.zepto.money/unassigned_agreements/b61fc159-8779-4a17-a826-e398e3e7e211/invitation
          - ref: A.7ea
            initiator_id: b61fc159-8779-4a17-a826-e398e3e7e211
            status: proposed
            responded_at: null
            created_at: '2017-03-21T00:53:27Z'
            terms:
              per_payout:
                max_amount: null
                min_amount: null
              per_frequency:
                days: null
                max_amount: null
            assignment_expires_at: '2017-03-21T00:54:27Z'
            link: >-
              https://go.nz.sandbox.zepto.money/unassigned_agreements/4e2728cc-b4ba-42c2-a6c3-26a7758de58d/invitation
    GetUnassignedAgreementResponse:
      title: Get an Unassigned Agreement (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          ref: A.4k
          initiator_id: 4e2728cc-b4ba-42c2-a6c3-26a7758de58d
          status: proposed
          responded_at: null
          created_at: '2017-03-20T00:53:27Z'
          terms:
            per_payout:
              max_amount: 10000
              min_amount: null
            per_frequency:
              days: 7
              max_amount: 1000000
          assignment_expires_at: '2017-03-20T00:54:27Z'
          link: >-
            https://go.nz.sandbox.zepto.money/unassigned_agreements/b61fc159-8779-4a17-a826-e398e3e7e211/invitation
    GetUserDetailsResponse:
      title: Get User details (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          first_name: Bear
          last_name: Dog
          mobile_phone: 0456945832
          email: bear@dog.com
          account:
            name: Dog Bones Inc
            nickname: dog-bones-inc
            abn: '129959040'
            phone: 0418495033
            street_address: 98 Acme Avenue
            suburb: Lead
            postcode: '2478'
    SimulateIncomingPayIDPaymentRequest:
      required:
        - payid_email
        - amount
      type: object
      properties:
        payid_email:
          type: string
          min: 6
          max: 256
          description: 'Receivable Contact PayID email (Min: 6 - Max: 256)'
        amount:
          type: integer
          min: 1
          max: 99999999999
          description: 'Amount in cents (Min: 1 - Max: 99999999999)'
        payment_description:
          type: string
          description: 'Default:  "Simulated PayID payment"'
        payment_reference:
          type: string
          description: 'Default:  "simulated-payid-payment"'
        from_bsb:
          type: string
          min: 6
          max: 6
          description: 'Default: "014209"'
        from_account_number:
          type: string
          min: 1
          max: 9
          description: 'Default: "12345678"'
        debtor_name:
          type: string
          min: 1
          description: 'Default:  "Simulated Debtor"'
        debtor_legal_name:
          type: string
          min: 1
          description: 'Default:  "Simulated Debtor Pty Ltd"'
      example:
        payid_email: incoming@split.cash
        amount: 10000
    SimulateIncomingDEPaymentRequest:
      required:
        - to_bsb
        - to_account_number
        - amount
      type: object
      properties:
        to_bsb:
          type: string
          min: 6
          max: 6
          description: 'Zepto float account BSB (usually 802919)'
        to_account_number:
          type: string
          min: 1
          max: 9
          description: 'Zepto float account number'
        amount:
          type: integer
          min: 1
          max: 99999999999
          description: 'Amount in cents (Min: 1 - Max: 99999999999)'
        payment_reference:
          type: string
          max: 18
          description: 'Max 18 characters. Default: "simulated-de-pymt"'
        from_bsb:
          type: string
          min: 6
          max: 6
          description: 'Default: "014209"'
        from_account_number:
          type: string
          min: 1
          max: 9
          description: 'Default: "12345678"'
        debtor_name:
          type: string
          min: 1
          max: 16
          description: 'Max 16 characters. Default: "Simulated Debtor"'
      example:
        to_bsb: "802919"
        to_account_number: "88888888"
        amount: 10000
    AddATransferRequest:
      required:
        - from_bank_account_id
        - to_bank_account_id
        - amount
        - description
        - matures_at
      type: object
      properties:
        from_bank_account_id:
          type: string
          description: 'The source float/bank account (UUID)'
        to_bank_account_id:
          type: string
          description: 'The destination float/bank account (UUID)'
        amount:
          type: integer
          description: 'Amount in cents (Min: 1 - Max: 99999999999)'
        description:
          type: string
          description: Description for the Transfer
        matures_at:
          type: string
          format: date-time
          description: Date & time in UTC ISO8601 the Transfer should be processed. (Can not be earlier than the start of current day in NZST)
          example: '2021-06-01T02:10:56Z'
      example:
        from_bank_account_id: a79423b2-3827-4cf5-9eda-dc02a298d005
        to_bank_account_id: 0921a719-c79d-4ffb-91b6-1b30ab77d14d
        amount: 100000
        description: Float account balance adjustment
        matures_at: '2021-06-06T00:00:00Z'
    AddATransferResponse:
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - ref
            - from_bank_account_id
            - to_bank_account_id
            - amount
            - description
            - matures_at
          properties:
            ref:
              type: string
              description: 'The Transfer request reference (T.*) (Min: 4 - Max: 8)'
            from_bank_account_id:
              type: string
              description: 'The source bank/float account (UUID)'
            to_bank_account_id:
              type: string
              description: 'The destination bank/float account (UUID'
            amount:
              type: integer
              description: 'The amount value provided (Min: 1 - Max: 99999999999)'
            description:
              type: string
              description: Description for the Transfer
            matures_at:
              type: string
              format: date-time
              description: Date & time in UTC ISO8601 the Transfer should be processed. (Can not be earlier than the start of current day in NZST)
              example: '2021-06-01T02:10:56Z'
      example:
        data:
          ref: T.11ub
          from_bank_account_id: a79423b2-3827-4cf5-9eda-dc02a298d005
          to_bank_account_id: 0921a719-c79d-4ffb-91b6-1b30ab77d14d
          amount: 100000
          description: Float account balance adjustment
          matures_at: '2021-06-06T00:00:00Z'
    GetATransferResponse:
      required:
        - data
      type: object
      properties:
        data:
          type: object
          required:
            - ref
            - from_bank_account_id
            - to_bank_account_id
            - amount
            - description
            - matures_at
          properties:
            ref:
              type: string
              format: uuid
              description: 'The Transfer request reference (T.*) (Min: 4 - Max: 8)'
            initiator_id:
              type: string
              description: 'Initiating Zepto Account'
            from_bank_account_id:
              type: string
              description: 'The source bank/float account (UUID)'
            to_bank_account_id:
              type: string
              description: 'The destination bank/float account (UUID'
            amount:
              type: integer
              description: 'The amount value provided (Min: 1 - Max: 99999999999)'
            description:
              type: string
              description: Description for the Transfer
            matures_at:
              type: string
              format: date-time
              description: Date & time in UTC ISO8601 the Transfer should be processed. (Can not be earlier than the start of current day in NZST)
              example: '2021-06-01T02:10:56Z'
      example:
        data:
          ref: T.87xp
          from_bank_account_id: a79423b2-3827-4cf5-9eda-dc02a298d005
          to_bank_account_id: 0921a719-c79d-4ffb-91b6-1b30ab77d14d
          amount: 47000
          description: Deposit from my bank account
          matures_at: '2021-06-03T00:00:00Z'
    ListAllWebhooksResponse:
      title:  List all Webhooks (response)
      required:
        - data
      type: object
      properties:
        data:
          required: true
          type: array
          items:
            type: object
      example:
        data:
        - id: 13bd760e-447f-4225-b801-0777a15da131
          url: "https://webhook.site/a9a3033b-90eb-44af-9ba3-29972435d10e"
          signature_secret: "8fad2f5570e6bf0351728f727c5a8c770dda646adde049b866a7800d59"
          events:
          - debit.cleared
          - credit.cleared
    GetWebhookDeliveriesResponse:
      properties:
        data:
          required: true
          type: array
          items:
            type: object
      example:
        data:
        - id: 957d40a4-80f5-4dd2-8ada-8242d5ad66c1
          event_type: payout_request.added
          state: completed
          response_status_code: 200
          created_at: 2021-09-02T02:24:50Z
          payload_data_summary:
          - ref: PR.ct5b
        - id: 29bb9835-7c69-4ecb-bf96-197d089d0ec3
          event_type: creditor_debit.scheduled
          state: completed
          response_status_code: 200
          created_at: 2021-09-02T02:24:50Z
          payload_data_summary:
          - ref: "D.hyy9"
          - ref: "D.6st93"
    GetAWebhookDeliveryResponse:
      title: Get a WebhookDelivery (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: The Webhook Delivery ID
            webhook_id:
              type: string
              format: uuid
              description: The Webhook ID
            state:
              type: string
              description: The state of the webhook delivery.
              enum:
                - pending
                - completed
                - retrying
                - failed
            payload:
              type: object
              description: Could be anything
            created_at:
              type: string
              format: date-time
              description: When the webhook delivery was created
      example:
        data:
          id: 957d40a4-80f5-4dd2-8ada-8242d5ad66c1
          webhook_id: 13bd760e-447f-4225-b801-0777a15da131
          event_type: "payout_request.added"
          state: "completed"
          payload:
            data:
            - ref: PR.ct5b
              payout:
                amount: 1501
                matures_at: 2021-09-02T02:24:49Z
                description: Payment from Incoming Test Payment Contact 014209 12345678 (Test Payment)
              status: approved
              created_at: 2021-09-02T02:24:49Z
              credit_ref: C.p2rt
              matures_at: 2021-09-02T02:24:49Z
              initiator_id: b50a6e92-a5e1-4175-b560-9e4c9a9bb4b9
              responded_at: 2021-09-02T02:24:49Z
              schedule_ref: null
              authoriser_id: 780f186c-80fd-42b9-97d5-650d99a0bc99
              status_reason: null
              your_bank_account_id: b50a6e92-a5e1-4175-b560-9e4c9a9bb4b9
              authoriser_contact_id: 590be205-6bae-4070-a9af-eb50d514cec5
              authoriser_contact_initiated: true
            - event:
                at: 2021-09-02T02:24:49Z
                who:
                  account_id: 20f4e3f8-2efc-48a9-920b-541515f1c9e3
                  account_type: Account
                  bank_account_id: b50a6e92-a5e1-4175-b560-9e4c9a9bb4b9
                  bank_account_type: BankAccount
                type: payment_request.added
        response_status_code: 200
        created_at: 2021-09-02T02:24:50Z
    RedeliverAWebhookDeliveryResponse:
      title: Resend a WebhookDelivery (response)
      required:
        - data
      type: object
      properties:
        data:
          type: object
      example:
        data:
          id: 957d40a4-80f5-4dd2-8ada-8242d5ad66c1
          webhook_id: 13bd760e-447f-4225-b801-0777a15da131
          state: pending
security:
  - bearerAuth: []
